#Run using snakemake -j1 --latency-wait 120 --use-conda


#Dependancies to be used - R / Rpackages: ShortRead / angsd / blast-legacy (v2.2.26) / blast (v2.2.31)
#conda env export --from-history > environment.yaml
#conda env create --name testenv --file environment.yaml

import time
import os
import os.path



##### Load Input Files and usefull info  #####


GENES=[]
ORGANISM=[]
REFERENCE={}


PROTEIN_FILE=open('Proteins.txt','r')
for line in PROTEIN_FILE:
    GENES.append(line.strip())




ORGANISM_FILE=open('Organism.txt','r')
for line in ORGANISM_FILE:
    line=line.strip().split('\t')
    ORGANISM.append(line[0])
    REFERENCE[line[0]]='CURRENT'
    if (len(line)==2):
        REFERENCE[line[0]]=line[1]
        


#######################################################################################################################################################################
## Starting Rule

rule all:
    input:
        ["Workspace/5_Loc_Files/{}/{}/starts.txt".format(x,REFERENCE[x]) for x in ORGANISM],
        ["Workspace/5_Loc_Files/{}/{}/Gene_locs.txt".format(x,REFERENCE[x]) for x in ORGANISM]


#######################################################################################################################################################################
## Data Pipeline ##

####Search Uniprot using Gene/Protein name, find best matching Gene -> get its Ensembl Gene ID

rule Get_Ensembl_Gene_IDs:
    input:
        "Proteins.txt",
        "Organism.txt"
    output:
        expand("Workspace/1_Gene_IDs/{organism}/{sample}",sample=GENES,organism=ORGANISM),
        expand('Workspace/1_Gene_IDs/{organism}/Missing_IDs.txt',organism=ORGANISM)
    run:

        for ORG in ORGANISM:
        
            #Check if path for organism exists/create it
            path='Workspace/1_Gene_IDs/'+str(ORG)
            if os.path.exists(path)==False:
                os.makedirs(path)
            
            #Get GeneID for every gene of list
            limiter=0
            for GENE in GENES:
                
                #limiter, because requesting too many files in too short of a time, will cause IP to be blocked
                if limiter%50==0:
                    time.sleep(1)
                    
                shell(""" python3 Python_Scripts/Search_Uniprot.py {} {}""".format(GENE,ORG))
                
                limiter+=1





rule Get_Ensembl_Transcript_IDs:
    input:
        expand("Workspace/1_Gene_IDs/{organism}/{sample}",sample=GENES,organism=ORGANISM),
        expand('Workspace/1_Gene_IDs/{organism}/Missing_IDs.txt',organism=ORGANISM)
    output:
        expand("Workspace/2_Transcript_IDs/{organism}/{sample}",sample=GENES,organism=ORGANISM)
    run:

        for ORG in ORGANISM:
            
            #check for missing Gene IDs
            MISSING_FILE=open('Workspace/1_Gene_IDs/{}/Missing_IDs.txt'.format(ORG),'r')
            MISSING_GENES=[]
            for line in MISSING_FILE:
                MISSING_GENES.append(line.strip())
            FOUND_GENES=[x for x in GENES if x not in MISSING_GENES]    
            
            
            #Check if path for organism exists/create it
            path='Workspace/2_Transcript_IDs/'+str(ORG)
            if os.path.exists(path)==False:
                os.makedirs(path)
            
            
            limiter=0
            #Get transcript ID for every GeneID
            for GENE in FOUND_GENES:
                
                #limiter, because requesting too many files in too short of a time, will cause IP to be blocked
                if limiter % 50 == 0:
                    time.sleep(1)
                
                with open('Workspace/1_Gene_IDs/{}/{}'.format(ORG,GENE)) as f:
                    GENE_ID = f.readline().strip()
                shell('''python3 Python_Scripts/Search_Ensembl.py {} {} {}'''.format(GENE,GENE_ID,ORG))
                
                limiter+=1
             
             
             
             
            #for missing GeneIDs make dummy in its place
            for GENE in MISSING_GENES:
            
                if GENE!='':
                    shell('''touch Workspace/2_Transcript_IDs/{}/{} '''.format(ORG,GENE))


           
rule Get_FASTA_Sequence_from_Transcript_ID:
    input:
        expand("Workspace/2_Transcript_IDs/{organism}/{sample}",sample=GENES,organism=ORGANISM)
    output:
        expand("Workspace/3_FASTA_Seqs/{organism}/{sample}.fa",sample=GENES,organism=ORGANISM)
    run:
        for ORG in ORGANISM:
        
            #Check if path for organism exists/create it
            path='Workspace/3_FASTA_Seqs/'+str(ORG)
            if os.path.exists(path)==False:
                os.makedirs(path)
            
            limiter=0
            #for each gene grab the transcript ID and use a script to get the AA fasta seq for it
            for GENE in GENES:
                
                if limiter % 50 == 0:
                    time.sleep(1)
                
                TRNSCRPT_FILE=open('Workspace/2_Transcript_IDs/{}/{}'.format(ORG,GENE),'r')
                TRNSCRPT_ID=TRNSCRPT_FILE.readline().strip()
                
                shell('''python3  Python_Scripts/Get_Prot_Sequence_Ensembl.py {} {} {}'''.format(GENE,TRNSCRPT_ID,ORG))
                limiter+=1
        
        
rule Get_Exon_Intron_Table_from_Transcript_ID:
    input:
        expand("Workspace/2_Transcript_IDs/{organism}/{sample}",sample=GENES,organism=ORGANISM)
    output:
        expand("Workspace/4_EITs/{organism}/{sample}_ei.txt",sample=GENES,organism=ORGANISM)
    run:
        for ORG in ORGANISM:
            #Check if path for organism exists/create it
            path='Workspace/4_EITs/'+str(ORG)
            if os.path.exists(path)==False:
                os.makedirs(path)

            limiter=0
            for GENE in GENES:
    
                if limiter % 50 == 0:
                    time.sleep(1)
                
                TRNSCRPT_FILE=open('Workspace/2_Transcript_IDs/{}/{}'.format(ORG,GENE),'r')
                TRNSCRPT_ID=TRNSCRPT_FILE.readline().strip()
                
                shell('''python3  Python_Scripts/Get_Exon_Intron_Table.py {} {} {}'''.format(GENE,TRNSCRPT_ID,ORG))
                limiter+=1
                


          
                
rule Get_Location_Info_from_Ensemble_Gene_ID:
    input:
        expand("Workspace/1_Gene_IDs/{organism}/{sample}",sample=GENES,organism=ORGANISM)
    output:
        ["Workspace/5_Loc_Files/{}/{}/starts.txt".format(x,REFERENCE[x]) for x in ORGANISM],
        ["Workspace/5_Loc_Files/{}/{}/Gene_locs.txt".format(x,REFERENCE[x]) for x in ORGANISM]
    run:
        for ORG in ORGANISM:
        
            #Check if path for organism exists/create it
            path='Workspace/5_Loc_Files/'+str(ORG)+'/'+str(REFERENCE[ORG])
            if os.path.exists(path)==False:
                os.makedirs(path)


            limiter=0
            for GENE in GENES:
                
                if limiter % 50 == 0:
                    time.sleep(1)
                

                with open('Workspace/1_Gene_IDs/{}/{}'.format(ORG,GENE)) as f:
                    GENE_ID = f.readline().strip()
                
                shell('''python3 Python_Scripts/Get_Assembly_Location.py {} {} {} {}'''.format(GENE,GENE_ID,ORG,REFERENCE[ORG]))
                
                
                
                limiter+=1
                