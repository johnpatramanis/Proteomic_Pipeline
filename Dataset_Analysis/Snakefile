#Run using snakemake -j1 --latency-wait 120 --use-conda


#Dependancies to be used R, ShortRead, Snakemake, MUSCLE,
#conda env export --from-history > environment.yaml
#conda env create --name testenv --file environment.yaml


import os
import os.path



##### Load Input Files and usefull info  #####


DATASETS={}
DATASETS_FILE=open('Datasets.txt','r')

Labels=DATASETS_FILE.readline()
counter=1
for line in DATASETS_FILE:
    line=line.strip().split()
    Dataset=line[0]
    AncSamples=line[1].split(',')
    
    
    if Dataset in DATASETS:
        DATASETS[Dataset].append([x for x in AncSamples])

    else:
        DATASETS[Dataset]=[[x for x in AncSamples]]
        

print(DATASETS)

JOINED_NAMES=[]
for DATASET,ANC_SAMPLES in DATASETS.items():
    for SAMPLES in ANC_SAMPLES:
        JOINED_NAMES.append('-'.join([DATASET,'-'.join(SAMPLES)]))

print(JOINED_NAMES)
#######################################################################################################################################################################
#######################################################################################################################################################################
#######################################################################################################################################################################
## Starting Rule




rule all:
    input:
        ['Workspace/2_DATASETS/{}/Samples.txt'.format(x) for x in JOINED_NAMES],
        [ 'Workspace/2_DATASETS/{}/PhyML_Individual_Genes_Done'.format(x) for x in JOINED_NAMES ],
        [ 'Workspace/2_DATASETS/{}/PhyML_Concatenated_Genes_Done'.format(x) for x in JOINED_NAMES ],
        [ 'Workspace/2_DATASETS/{}/MrBayes_Concatenated_Genes_Done'.format(x) for x in JOINED_NAMES ]




#######################################################################################################################################################################
## Dataset Pipeline ##


#Organise Datasets
rule Organise_Data:
    input:
        "Datasets.txt"
    output:
        ['Workspace/2_DATASETS/{}/Samples.txt'.format(x) for x in JOINED_NAMES]
    run:
        
        for DATASET,ANC_SAMPLES in DATASETS.items():
            for SAMPLES in ANC_SAMPLES:
                shell("""echo '{}' >  Workspace/2_DATASETS/{}/Samples.txt;""".format('\n'.join(SAMPLES),'-'.join([DATASET,'-'.join(SAMPLES)]))) #append all versions of analysis
 



#Create a Genes folder for every dataset
#
rule Create_Genes_Folders:
    input:
        "Datasets.txt"
    output:
        [ 'Workspace/2_DATASETS/{}/Genes.txt'.format(x) for x in JOINED_NAMES ]
    run:
    
        for DATASET,ANC_SAMPLES in DATASETS.items(): # Create and fill in the Genes.txt file for each dataset
        
            
            for SAMPLES in ANC_SAMPLES:
            
            
                if isinstance(SAMPLES, list) is True:
                    print(SAMPLES)
                    for SAMPLE in SAMPLES:
                        shell("""SAMPLE_NAME={}; REF='Workspace/1_OG_Dataset/{}'; grep ">"$SAMPLE_NAME $REF | rev | cut -f 1 -d "_" | rev |cut -f 1 -d ">" |cut -f 1 -d '/' >> TMP;""".format(SAMPLE,DATASET))
                        
                        
                if isinstance(SAMPLES, list) is False:
                    shell("""SAMPLE_NAME={}; REF='Workspace/1_OG_Dataset/{}'; grep ">"$SAMPLE_NAME $REF | rev | cut -f 1 -d "_" | rev |cut -f 1 -d ">" |cut -f 1 -d '/' > TMP;""".format(SAMPLES,DATASET))
                
                
                shell("""cat TMP | sort | uniq > Workspace/2_DATASETS/{}/Genes.txt;""".format('-'.join([DATASET,'-'.join(SAMPLES)])))
                shell("""rm TMP;""")



#For every dataset, split it into gene specific sub-datasets
#
rule Create_Genes_Folders2:
    input:
        [ 'Workspace/2_DATASETS/{}/Genes.txt'.format(x) for x in JOINED_NAMES ]
    output:
        [ 'Workspace/2_DATASETS/{}/Foldering_Done'.format(x) for x in JOINED_NAMES ]
    run:
        for X in JOINED_NAMES:
            # shell("""cat Workspace/2_DATASETS/{}/Genes.txt |while read line; do rm -rf $line; mkdir $line; done;""".format(X))
            Xm=X.split('-')
            DATASET=Xm[0]
            SAMPLES=Xm[1:]
            print(DATASET,SAMPLES)
            #Use dataset name as input for the R script
            
            shell("""Rscript Rscripts/Rscript1.r /Workspace/2_DATASETS/{} Workspace/1_OG_Dataset/{};""".format(X,DATASET))
            
            shell("""touch Workspace/2_DATASETS/{}/Foldering_Done;""".format(X))
            
            


#Align each dataset            
#
rule Align_Gene_Datasets:
    input:
        [ 'Workspace/2_DATASETS/{}/Foldering_Done'.format(x) for x in JOINED_NAMES ]
    output:
        [ 'Workspace/2_DATASETS/{}/Alignment_Done'.format(x) for x in JOINED_NAMES ]
    threads: 32
    run:
        for X in JOINED_NAMES:
            
            #### ADD Ancient sequence to alignment##   mafft-einsi --addprofile COL17A1_ancient.fa COL17A1_aln.fa > COL17A1_NEW.fa
            #### ADD Ancient sequence to alignment##   mafft-einsi --seed COL17A1_aln.fa  COL17A1_ancient.fa > COL17A1_NEW.fa
            # shell("""cat Workspace/2_DATASETS/{}/Genes.txt | while read line; do clustalw -INFILE=Workspace/2_DATASETS/{}/$line/$line"_o.fa" -outfile=Workspace/2_DATASETS/{}/$line/$line"_aln.fa" -PWMATRIX=BLOSUM -PWGAPOPEN=10 -ITERATION=TREE -NUMITER=1000 -OUTORDER==INPUT -OUTPUT=FASTA; done;""".format(X,X,X))
            shell("""cat Workspace/2_DATASETS/{}/Genes.txt | while read line; do mafft --ep 0 --op 0.5 --lop -0.5 --genafpair --maxiterate 20000 --thread {} --bl 80 --fmodel Workspace/2_DATASETS/{}/$line/$line"_no_ancient.fa" >  Workspace/2_DATASETS/{}/$line/$line"_no_ancient_aln.fa"; done;""".format(X,threads,X,X))
            # shell("""cat Workspace/2_DATASETS/{}/Genes.txt | while read line; do clustalw -PROFILE1=Workspace/2_DATASETS/{}/$line/$line"_no_ancient_aln.fa" -PROFILE2=Workspace/2_DATASETS/{}/$line/$line"_ancient.fa" -outfile=Workspace/2_DATASETS/{}/$line/$line"_re_aln.fa" -NUMITER=1000 -PWMATRIX=BLOSUM -PWGAPEXT=0.01 -OUTORDER==INPUT -OUTPUT=FASTA; done;""".format(X,X,X,X))
            shell("""cat Workspace/2_DATASETS/{}/Genes.txt | while read line; do mafft-einsi  --addlong Workspace/2_DATASETS/{}/$line/$line"_ancient.fa" Workspace/2_DATASETS/{}/$line/$line"_no_ancient_aln.fa"  > Workspace/2_DATASETS/{}/$line/$line"_re_aln.fa"; done;""".format(X,X,X,X))
            shell("""cat Workspace/2_DATASETS/{}/Genes.txt | while read line; do trimal -in Workspace/2_DATASETS/{}/$line/$line"_re_aln.fa" -out Workspace/2_DATASETS/{}/$line/$line"_aln.fa"  -noallgaps; done;""".format(X,X,X))
            shell("""touch Workspace/2_DATASETS/{}/Alignment_Done;""".format(X))
            
            
#Generate statistics for each sample in each dataset, swap L/M aminoacids based on reference samples           
#            
rule Generate_Stats_and_Check_LM_AminoAcids:
    input:
        [ 'Workspace/2_DATASETS/{}/Alignment_Done'.format(x) for x in JOINED_NAMES ]
    output:
        [ 'Workspace/2_DATASETS/{}/Info_and_Checking_Done'.format(x) for x in JOINED_NAMES ]
    run:       
        for X in JOINED_NAMES:
            shell("""Rscript Rscripts/Rscript2.r /Workspace/2_DATASETS/{} ;""".format(X))
            shell("""touch Workspace/2_DATASETS/{}/Info_and_Checking_Done ;""".format(X))


#Concatenate Genes into one new fasta           
#
rule Generate_Concatenated_Datasets:
    input:
        [ 'Workspace/2_DATASETS/{}/Info_and_Checking_Done'.format(x) for x in JOINED_NAMES ]
    output:
        [ 'Workspace/2_DATASETS/{}/Concatenation_Done'.format(x) for x in JOINED_NAMES ]
    run:        
        for X in JOINED_NAMES:
            shell("""Rscript Rscripts/Rscript3.r /Workspace/2_DATASETS/{} 0.2 ;""".format(X))
            shell("""touch Workspace/2_DATASETS/{}/Concatenation_Done ;""".format(X))






#Convert FASTA files to Phylip format        
#
rule Generate_Phylip_Format:
    input:
        [ 'Workspace/2_DATASETS/{}/Concatenation_Done'.format(x) for x in JOINED_NAMES ]
    output:
        [ 'Workspace/2_DATASETS/{}/Phylip_Format_Done'.format(x) for x in JOINED_NAMES ]
    run:        
        for X in JOINED_NAMES:
            shell("""Rscript Rscripts/Rscript4.r /Workspace/2_DATASETS/{};""".format(X))
            shell("""touch Workspace/2_DATASETS/{}/Phylip_Format_Done;""".format(X))
        






#Run PhyML for each individual protein and generate trees      
#           
rule Run_PhyML_Individual_Genes:
    input:
        [ 'Workspace/2_DATASETS/{}/Phylip_Format_Done'.format(x) for x in JOINED_NAMES ]
    output:
        [ 'Workspace/2_DATASETS/{}/PhyML_Individual_Genes_Done'.format(x) for x in JOINED_NAMES ]
    threads: 25
    run:        
        for X in JOINED_NAMES:          
            shell(""" cd Workspace/2_DATASETS/{};\
            cat Genes.txt |while read line;\
            do 
                RAND=$(( $RANDOM %99999));\
                echo $RAND;\
                mpirun -n {} phyml-mpi -i "./"$line"/"$line"_aln_e.phy" -d aa -b 100 -m JTT -c 4 -a e -s BEST -v e -o tlr -f m --rand_start --n_rand_starts 3 --r_seed $RAND --print_site_lnl --print_trace --no_memory_check < /dev/null;\
            done;""".format(X,threads))
            shell("""touch Workspace/2_DATASETS/{}/PhyML_Individual_Genes_Done;""".format(X))
        
       


       
#Run PhyML on the concatenated datasets
#        
        
rule Run_PhyML_Concatenated_Genes:
    input:
        [ 'Workspace/2_DATASETS/{}/Concatenation_Done'.format(x) for x in JOINED_NAMES ],
        [ 'Workspace/2_DATASETS/{}/Phylip_Format_Done'.format(x) for x in JOINED_NAMES ]
    output:
        [ 'Workspace/2_DATASETS/{}/PhyML_Concatenated_Genes_Done'.format(x) for x in JOINED_NAMES ]
    threads: 25
    run:        
        for X in JOINED_NAMES:
            shell( """ RAND=$(( $RANDOM %999));\
            cd Workspace/2_DATASETS/{};\
            cd ./CONCATINATED;\
            mpirun -n {} phyml-mpi -i CONCATINATED_aln_e.phy -d aa -b 100 -m HIVb -a e -s BEST -v e -o tlr -f m --rand_start --n_rand_starts 4 --r_seed $RAND --print_site_lnl --print_trace --no_memory_check < /dev/null;\
            cd ..; """.format(X,threads))
            shell("""touch Workspace/2_DATASETS/{}/PhyML_Concatenated_Genes_Done;""".format(X))


       
#
#Transform from fasta to Nexus format for MrBayes

rule Generate_NEXUS_format:
    input:
        [ 'Workspace/2_DATASETS/{}/Concatenation_Done'.format(x) for x in JOINED_NAMES ]
    output:
        [ 'Workspace/2_DATASETS/{}/NEXUS_Concatenated_Genes_Done'.format(x) for x in JOINED_NAMES ]
    run:        
        for X in JOINED_NAMES:
            shell( """cd Workspace/2_DATASETS/{};\
            cd ./CONCATINATED;\
            seqmagick convert --output-format nexus --alphabet protein CONCATINATED_o.fa CONCATINATED_o.nex;\
            cd ..; """.format(X))
            shell("""touch Workspace/2_DATASETS/{}/NEXUS_Concatenated_Genes_Done;""".format(X))
 

 
# 
#Do a MrBayes run on the concatenated dataset
rule Run_MrBayes_Concatenated_Genes:
    input:
        [ 'Workspace/2_DATASETS/{}/NEXUS_Concatenated_Genes_Done'.format(x) for x in JOINED_NAMES ]
    output:
        [ 'Workspace/2_DATASETS/{}/MrBayes_Concatenated_Genes_Done'.format(x) for x in JOINED_NAMES ]
    threads: 32
    run:        
        for X in JOINED_NAMES:
            shell( """ RAND=$(( $RANDOM %999));\
            cd Workspace/2_DATASETS/{};\
            cd ./CONCATINATED;\
            rm CONCATINATED_o.nex.*;\
            echo -e 'set autoclose=yes\nexecute CONCATINATED_o.nex'>MrBatch.txt;\
            cat ./Partition_Helper >> MrBatch.txt;\
            echo -e 'prset aamodelpr = mixed;\nmcmc nchains = {} ngen = 1000000;\nsumt relburnin = yes burninfrac = 0.25;\nsump;\nquit;'>>MrBatch.txt;\
            mpirun -np {} mb-mpi < MrBatch.txt > log.txt;\
            echo "MrBayes Run Done";\
            cd ..; """.format(X,threads,threads))
            shell("""touch Workspace/2_DATASETS/{}/MrBayes_Concatenated_Genes_Done;""".format(X))
            ####To unlink partitions # unlink statefreq=(all) revmat=(all) shape=(all) pinvar=(all);\n
