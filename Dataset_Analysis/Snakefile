#Run using snakemake -j1 --latency-wait 120 --use-conda


#Dependancies to be used R, ShortRead, Snakemake, MUSCLE,
#conda env export --from-history > environment.yaml
#conda env create --name testenv --file environment.yaml


import os
import os.path



##### Load Input Files and usefull info  #####


DATASETS={}
DATASETS_FILE=open('Datasets.txt','r')

Labels=DATASETS_FILE.readline()
counter=1
for line in DATASETS_FILE:
    line=line.strip().split()
    Dataset=line[0]
    AncSamples=line[1].split(',')
    
    
    if Dataset in DATASETS:
        DATASETS[Dataset].append([x for x in AncSamples])

    else:
        DATASETS[Dataset]=[[x for x in AncSamples]]
        
        
print(DATASETS)

JOINED_NAMES=[]
for DATASET,ANC_SAMPLES in DATASETS.items():
    for SAMPLES in ANC_SAMPLES:
        JOINED_NAMES.append('-'.join([DATASET,'-'.join(SAMPLES)]))

print(JOINED_NAMES)
#######################################################################################################################################################################
#######################################################################################################################################################################
#######################################################################################################################################################################
## Starting Rule




rule all:
    input:
        ['Workspace/2_DATASETS/{}/Samples.txt'.format(x) for x in JOINED_NAMES],
        [ 'Workspace/2_DATASETS/{}/Concatenation_Done'.format(x) for x in JOINED_NAMES ]




#######################################################################################################################################################################
## Dataset Pipeline ##


#Organise Datasets
rule Organise_Data:
    input:
        "Datasets.txt"
    output:
        ['Workspace/2_DATASETS/{}/Samples.txt'.format(x) for x in JOINED_NAMES]
    run:
        
        for DATASET,ANC_SAMPLES in DATASETS.items():
            for SAMPLES in ANC_SAMPLES:
                shell("""echo '{}' >  Workspace/2_DATASETS/{}/Samples.txt;""".format('\n'.join(SAMPLES),'-'.join([DATASET,'-'.join(SAMPLES)]))) #append all versions of analysis
 



#Create a Genes folder for every dataset
#
rule Create_Genes_Folders:
    input:
        "Datasets.txt"
    output:
        [ 'Workspace/2_DATASETS/{}/Genes.txt'.format(x) for x in JOINED_NAMES ]
    run:
    
        for DATASET,ANC_SAMPLES in DATASETS.items(): # Create and fill in the Genes.txt file for each dataset
        
            
            for SAMPLES in ANC_SAMPLES:
            
            
                if isinstance(SAMPLES, list) is True:
                    print(SAMPLES)
                    for SAMPLE in SAMPLES:
                        shell("""SAMPLE_NAME={}; REF='Workspace/1_OG_Dataset/{}'; grep ">"$SAMPLE_NAME $REF | rev | cut -f 1 -d "_" | rev |cut -f 1 -d ">" |cut -f 1 -d '/' > TMP;""".format(SAMPLE,DATASET))
                        
                        
                if isinstance(SAMPLES, list) is False:
                    shell("""SAMPLE_NAME={}; REF='Workspace/1_OG_Dataset/{}'; grep ">"$SAMPLE_NAME $REF | rev | cut -f 1 -d "_" | rev |cut -f 1 -d ">" |cut -f 1 -d '/' > TMP;""".format(SAMPLES,DATASET))
                
                
                shell("""cat TMP | sort | uniq > Workspace/2_DATASETS/{}/Genes.txt;""".format('-'.join([DATASET,'-'.join(SAMPLES)])))
                shell("""rm TMP;""")



#For every dataset, split it into gene specific sub-datasets

rule Create_Genes_Folders2:
    input:
        [ 'Workspace/2_DATASETS/{}/Genes.txt'.format(x) for x in JOINED_NAMES ]
    output:
        [ 'Workspace/2_DATASETS/{}/Foldering_Done'.format(x) for x in JOINED_NAMES ]
    run:
        for X in JOINED_NAMES:
            # shell("""cat Workspace/2_DATASETS/{}/Genes.txt |while read line; do rm -rf $line; mkdir $line; done;""".format(X))
            Xm=X.split('-')
            DATASET=Xm[0]
            SAMPLES=Xm[1:]
            print(DATASET,SAMPLES)
            #Use dataset name as input for the R script
            
            shell("""Rscript Rscripts/Rscript1.r /Workspace/2_DATASETS/{} Workspace/1_OG_Dataset/{};""".format(X,DATASET))
            
            shell("""touch Workspace/2_DATASETS/{}/Foldering_Done;""".format(X))
            
            

#Align each dataset            

rule Align_Gene_Datasets:
    input:
        [ 'Workspace/2_DATASETS/{}/Foldering_Done'.format(x) for x in JOINED_NAMES ]
    output:
        [ 'Workspace/2_DATASETS/{}/Alignment_Done'.format(x) for x in JOINED_NAMES ]
    run:
        for X in JOINED_NAMES:
            
            shell("""cat Workspace/2_DATASETS/{}/Genes.txt | while read line; do /home/rjt939/MUSCLE/muscle3.8.31_i86linux64 -in Workspace/2_DATASETS/{}/$line/$line"_o.fa" -out Workspace/2_DATASETS/{}/$line/$line"_aln.fa"; done;""".format(X,X,X))
            shell("""touch Workspace/2_DATASETS/{}/Alignment_Done;""".format(X))
            
            
        
        
rule Generate_Stats_and_Check_LM_AminoAcids:
    input:
        [ 'Workspace/2_DATASETS/{}/Alignment_Done'.format(x) for x in JOINED_NAMES ]
    output:
        [ 'Workspace/2_DATASETS/{}/Info_and_Checking_Done'.format(x) for x in JOINED_NAMES ]
    run:       
        for X in JOINED_NAMES:
            shell("""Rscript Rscripts/Rscript2.r /Workspace/2_DATASETS/{} ;""".format(X))
            shell("""touch Workspace/2_DATASETS/{}/Info_and_Checking_Done ;""".format(X))




rule Generate_Concatenated_Datasets:
    input:
        [ 'Workspace/2_DATASETS/{}/Info_and_Checking_Done'.format(x) for x in JOINED_NAMES ]
    output:
        [ 'Workspace/2_DATASETS/{}/Concatenation_Done'.format(x) for x in JOINED_NAMES ]
    run:        
        for X in JOINED_NAMES:
            shell("""Rscript Rscripts/Rscript3.r /Workspace/2_DATASETS/{} 0.1 ;""".format(X))
            shell("""touch Workspace/2_DATASETS/{}/Concatenation_Done ;""".format(X))






# rule Generate_Phylip_Format:
    # input:
        # [ 'Workspace/2_DATASETS/{}/Info_and_Checking_Done'.format(x) for x in JOINED_NAMES ]
    # output:
        # [ 'Workspace/2_DATASETS/{}/Info_and_Checking_Done'.format(x) for x in JOINED_NAMES ]
    # run:        
        # for X in JOINED_NAMES:           