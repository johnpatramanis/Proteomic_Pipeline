#Run using "snakemake -j4"


#Dependancies to be used: Snakemake/python3
#conda env export --from-history > environment.yaml
#conda env create --name testenv --file environment.yaml

import time
import os
import os.path



##### Load Input Files and usefull info  #####

FTP=50

GENES=[]
ORGANISM=[]
REFERENCE=[]


PROTEIN_FILE=open('Proteins.txt','r')
for line in PROTEIN_FILE:
    line=line.strip()
    line=line.replace("\\","-") #there are actually some genes with "/" in their name, which messes up the folder creation process
    GENES.append(line)




ORGANISM_FILE=open('Organism.txt','r')
for line in ORGANISM_FILE:
    line=line.strip().split()
    ORGANISM.append(line[0])
    if (len(line)==2):
        REFERENCE.append(line[1])
    else:
        REFERENCE.append('CURRENT')


#######################################################################################################################################################################
## Starting Rule

rule all:
    input:
        ["Workspace/5_Loc_Files/{}/{}/starts.txt".format(ORGANISM[x],REFERENCE[x]) for x in range(0,len(ORGANISM))],
        ["Workspace/5_Loc_Files/{}/{}/Gene_locs.txt".format(ORGANISM[x],REFERENCE[x]) for x in range(0,len(ORGANISM))],
        expand("Workspace/4_EITs/{organism}/{sample}_ei.txt",sample=GENES,organism=set(ORGANISM)),
        expand("Workspace/3_FASTA_Seqs/Genes_{organism}/{sample}.fa",sample=GENES,organism=set(ORGANISM)),
        expand("Workspace/3_FASTA_Seqs/Combined_Per_Species/{organism}.fa",organism=set(ORGANISM)),
        ["Workspace/3_FASTA_Seqs/Combined_Per_Protein/{}.fa".format(x) for x in GENES]


#######################################################################################################################################################################
## Data Pipeline ##

####Search using Gene/Protein name, find best matching Gene -> get its Ensembl Gene ID

rule Get_Ensembl_Gene_IDs_ALL:
    input:
        "Proteins.txt",
        "Organism.txt"
    output:
        "Workspace/1_Gene_IDs/{Organism}/{Gene}"
    resources:
        FTP=1
    run:
        ORG=wildcards.Organism
        print(ORG)
        #### Check if path for organism exists/create it
        path='Workspace/1_Gene_IDs/'+str(ORG)
        if os.path.exists(path)==False:
            os.makedirs(path)
        
        #### Get GeneID for every gene of list
        GENE=wildcards.Gene
        print(GENE)
        shell("""python3 Python_Scripts/Get_Gene_ID.py {} {}""".format(GENE,ORG))




rule Get_Ensembl_Transcript_IDs:
    input:
        "Workspace/1_Gene_IDs/{Organism}/{Gene}"
    output:
        "Workspace/2_Transcript_IDs/{Organism}/{Gene}"
    resources:
        FTP=1
    run:
        ORG=wildcards.Organism    
        
        #check for missing Gene IDs
        MISSING_FILE=open('Workspace/1_Gene_IDs/{}/Missing_IDs.txt'.format(ORG),'r')
        MISSING_GENES=[]
        for line in MISSING_FILE:
            MISSING_GENES.append(line.strip())
        FOUND_GENES=[x for x in GENES if x not in MISSING_GENES]    
        
        
        #Check if path for organism exists/create it
        path='Workspace/2_Transcript_IDs/'+str(ORG)
        if os.path.exists(path)==False:
            os.makedirs(path)
        
        
        limiter=0
        GENE=wildcards.Gene
        #Get transcript ID for every GeneID
        if GENE in FOUND_GENES:
        
            with open('Workspace/1_Gene_IDs/{}/{}'.format(ORG,GENE)) as f:
                GENE_ID = f.readline().strip()
            shell('''python3 Python_Scripts/Search_Ensembl.py {} {} {}'''.format(GENE,GENE_ID,ORG))

        #for missing GeneIDs make dummy in its place
        if GENE in MISSING_GENES:
            shell('''touch Workspace/2_Transcript_IDs/{}/{} '''.format(ORG,GENE))


rule Get_Ensembl_Transcript_IDs_ALL:
    input:
        expand("Workspace/1_Gene_IDs/{Organism}/{Gene}",Gene=GENES,Organism=set(ORGANISM))











           
rule Get_FASTA_Sequence_from_Transcript_ID:
    input:
        expand("Workspace/2_Transcript_IDs/{organism}/{sample}",sample=GENES,organism=set(ORGANISM))
    output:
        expand("Workspace/3_FASTA_Seqs/Genes_{organism}/{sample}.fa",sample=GENES,organism=set(ORGANISM))
    resources:
        FTP=1
    run:
        for ORG in ORGANISM:
        
            #Check if path for organism exists/create it
            path='Workspace/3_FASTA_Seqs/Genes_'+str(ORG)
            if os.path.exists(path)==False:
                os.makedirs(path)
            
            limiter=0
            #for each gene grab the transcript ID and use a script to get the AA fasta seq for it
            for GENE in GENES:
                
                if limiter % 50 == 0:
                    time.sleep(1)
                
                TRNSCRPT_FILE=open('Workspace/2_Transcript_IDs/{}/{}'.format(ORG,GENE),'r')
                TRNSCRPT_ID=TRNSCRPT_FILE.readline().strip()
                
                shell('''python3  Python_Scripts/Get_Prot_Sequence_Ensembl.py {} {} {}'''.format(GENE,TRNSCRPT_ID,ORG))
                limiter+=1
        
        
rule Get_Exon_Intron_Table_from_Transcript_ID:
    input:
        expand("Workspace/2_Transcript_IDs/{organism}/{sample}",sample=GENES,organism=set(ORGANISM))
    output:
        expand("Workspace/4_EITs/{organism}/{sample}_ei.txt",sample=GENES,organism=set(ORGANISM))
    resources:
        FTP=1
    run:
        for ORG in ORGANISM:
            #Check if path for organism exists/create it
            path='Workspace/4_EITs/'+str(ORG)
            if os.path.exists(path)==False:
                os.makedirs(path)

            limiter=0
            for GENE in GENES:
    
                if limiter % 50 == 0:
                    time.sleep(1)
                
                TRNSCRPT_FILE=open('Workspace/2_Transcript_IDs/{}/{}'.format(ORG,GENE),'r')
                TRNSCRPT_ID=TRNSCRPT_FILE.readline().strip()
                
                shell('''python3  Python_Scripts/Get_Exon_Intron_Table.py {} {} {}'''.format(GENE,TRNSCRPT_ID,ORG))
                limiter+=1
                

# rule Get_Location_Info_from_Ensemble_Gene_ID:
    # input:
        # "Workspace/2_Transcript_IDs/{Organism}/{Gene}"
    # output:
        # "Workspace/5_Loc_Files/{Organism}/{Reference}/starts.txt",
        # "Workspace/5_Loc_Files/{Organism}/{Reference}/Gene_locs.txt"
    # run:
        # path='Workspace/5_Loc_Files/'+wildcards.Organism+'/'+wildcards.Reference
        # if os.path.exists(path)==False:
            # os.makedirs(path)




rule Get_Location_Info_from_Ensemble_Gene_ID_ALL:
    input:
        expand("Workspace/2_Transcript_IDs/{Organism}/{Gene}",Gene=GENES,Organism=set(ORGANISM))

    output:
        ["Workspace/5_Loc_Files/{}/{}/starts.txt".format(ORGANISM[x],REFERENCE[x]) for x in range(0,len(ORGANISM))],
        ["Workspace/5_Loc_Files/{}/{}/Gene_locs.txt".format(ORGANISM[x],REFERENCE[x]) for x in range(0,len(ORGANISM))]
    resources:
        FTP=1
    run:
        for ORG in range(0,len(ORGANISM)):
        
            ########Check if path for organism exists/create it
            path='Workspace/5_Loc_Files/'+str(ORGANISM[ORG])+'/'+str(REFERENCE[ORG])
            if os.path.exists(path)==False:
                os.makedirs(path)
                
            
            

            limiter=0
            for GENE in GENES:
                
                if limiter % 50 == 0:
                    time.sleep(1)
                

                with open('Workspace/2_Transcript_IDs/{}/{}'.format(ORGANISM[ORG],GENE)) as f:
                    GENE_ID = f.readline().strip()
                
                shell('''python3 Python_Scripts/Get_Assembly_Location.py {} {} {} {}'''.format(GENE,GENE_ID,ORGANISM[ORG],REFERENCE[ORG]))
                
                
                
                limiter+=1






rule Combine_FASTA_Sequences_into_Ref:
    input:
        expand("Workspace/3_FASTA_Seqs/Genes_{organism}/{sample}.fa",sample=GENES,organism=set(ORGANISM))
    output:
        expand("Workspace/3_FASTA_Seqs/Combined_Per_Species/{organism}.fa",organism=set(ORGANISM)),
        ["Workspace/3_FASTA_Seqs/Combined_Per_Protein/{}.fa".format(x) for x in GENES]
    run:
        
        path='Workspace/3_FASTA_Seqs/Combined_Per_Species/'
        if os.path.exists(path)==False:
            os.makedirs(path)
            
        path2='Workspace/3_FASTA_Seqs/Combined_Per_Protein/'
        if os.path.exists(path2)==False:
            os.makedirs(path2)
            
        for ORG in ORGANISM:
            for GENE in GENES:
                shell('''cat Workspace/3_FASTA_Seqs/Genes_{}/{}.fa >>Workspace/3_FASTA_Seqs/Combined_Per_Species/{}.fa;'''.format(ORG,GENE,ORG))                
                shell('''echo "\n" >>Workspace/3_FASTA_Seqs/Combined_Per_Species/{}.fa;'''.format(ORG,GENE,ORG))                
                
                shell('''cat Workspace/3_FASTA_Seqs/Genes_{}/{}.fa >>Workspace/3_FASTA_Seqs/Combined_Per_Protein/{}.fa;'''.format(ORG,GENE,GENE))
                shell('''echo "\n" >>Workspace/3_FASTA_Seqs/Combined_Per_Protein/{}.fa;'''.format(GENE))                
            
            
            