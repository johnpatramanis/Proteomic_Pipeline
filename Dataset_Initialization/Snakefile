#Run using "snakemake -j4 --resources FTP=7"


#Dependancies to be used: Snakemake/python3
#conda env export --from-history > environment.yaml
#conda env create --name testenv --file environment.yaml

import time
import os
import os.path
from os.path import exists







################################################################################################################################################################################################
def INITIALISATION():
    ##### Load Input Files and usefull info  #####
    FTP=7
    SLEEPER=1

    GENES=[]
    ISOFORMS={}
    ORGANISM=[]
    REFERENCE=[]



    ###### LOAD REQUESTED PROTEINS/GENES
    ###    HANDLE ISOFORMS

    PROTEIN_FILE=open('Proteins.txt','r')
    for line in PROTEIN_FILE:

        line=line.replace("\\","-") #there are actually some genes with "/" in their name, which messes up the folder creation process
        line=line.strip().split('::')
        
        
        ## NO ISOFORM SPECIFIED
        if len(line)==1:
            
            GENE=line[0]
            GENES.append(GENE)

            if GENE in ISOFORMS.keys():
                ISOFORMS[GENE].append('CANON')
                
            if GENE not in ISOFORMS.keys():
                ISOFORMS[GENE]=['CANON']
        
        
        ## ISOFORM REQUESTED
        if len(line)>1:
            

            GENE=line[0]
            ISO=line[1]
            
            GENES.append(GENE)
            
        ### IF USER WANTS ALL ISOFORMS    
            if ISO=='ALL':
                ISOFORMS[GENE]='ALL'
                
                
        #### IF USER WANTS SPECIFIC ISOFORMS           
            if ISO!='ALL':
            
                ISO=GENE+'-'+ISO
                
                ## If more than one isoforms have been requeted for this gene
                if GENE in ISOFORMS.keys():
                    ISOFORMS[GENE].append(ISO)
                    
                ## If this is the first isoform requested for this gene
                if GENE not in ISOFORMS.keys():
                    ISOFORMS[GENE]=[ISO]


    GENES=list(set(GENES))

    for J,K in ISOFORMS.items():
        print(F'Requested Protein: {J} for Isoform(s): {K} ')



    ORGANISM_FILE=open('Organism.txt','r')
    for line in ORGANISM_FILE:
        line=line.strip().split()
        ORGANISM.append(line[0])
        if (len(line)==2):
            REFERENCE.append(line[1])
        else:
            REFERENCE.append('CURRENT')
    
    return GENES,ISOFORMS,ORGANISM,REFERENCE,SLEEPER,FTP

################################################################################################################################################################################################################################################################################################################################################








GENES,ISOFORMS,ORGANISM,REFERENCE,SLEEPER,FTP=INITIALISATION()









#######################################################################################################################################################################
## Starting Rule

rule all:
    input:
        ["Workspace/5_Loc_Files/{}/{}/starts.txt".format(ORGANISM[x],REFERENCE[x]) for x in range(0,len(ORGANISM))],
        ["Workspace/5_Loc_Files/{}/{}/Gene_locs.txt".format(ORGANISM[x],REFERENCE[x]) for x in range(0,len(ORGANISM))],
        expand("Workspace/4_EITs/{organism}/{sample}_ei.txt",sample=GENES,organism=set(ORGANISM)),
        expand("Workspace/3_FASTA_Seqs/Genes_{organism}/{sample}.fa",sample=GENES,organism=set(ORGANISM)),
        expand("Workspace/3_FASTA_Seqs/Combined_Per_Species/{organism}.fa",organism=set(ORGANISM)),
        ["Workspace/3_FASTA_Seqs/Combined_Per_Protein/{}.fa".format(x) for x in GENES]






#######################################################################################################################################################################
## Data Pipeline ##

#### Search using Gene/Protein name, find best matching Gene -> get its Ensembl Gene ID

rule Get_Ensembl_Gene_IDs_ALL:
    input:
        "Proteins.txt",
        "Organism.txt"
    output:
        "Workspace/1_Gene_IDs/{Organism}/{Gene}"
    resources:
        FTP=1
    run:
        ORG=wildcards.Organism
        print(ORG)
        #### Check if path for organism exists/create it
        path='Workspace/1_Gene_IDs/'+str(ORG)
        if os.path.exists(path)==False:
            os.makedirs(path)
        
        #### Get GeneID for every gene of list
        GENE=wildcards.Gene
        print(GENE)
        shell("""python3 Python_Scripts/Get_Gene_ID.py {} {}""".format(GENE,ORG)) 


#### Use GEN ID to get Transcript ID


rule Get_Ensembl_Transcript_IDs:
    input:
        "Workspace/1_Gene_IDs/{Organism}/{Gene}"
    output:
        "Workspace/2_Transcript_IDs/{Organism}/{Gene}"
    resources:
        FTP=1
    run:
        ORG=wildcards.Organism    
        
        #check for missing Gene IDs
        MISSING_FILE=open('Workspace/1_Gene_IDs/{}/Missing_IDs.txt'.format(ORG),'r')
        MISSING_GENES=[]
        for line in MISSING_FILE:
            MISSING_GENES.append(line.strip())
        FOUND_GENES=[x for x in GENES if x not in MISSING_GENES]    
        
        
        ## Check if path for organism exists/create it
        path='Workspace/2_Transcript_IDs/'+str(ORG)
        if os.path.exists(path)==False:
            os.makedirs(path)
        
        
        GENE=wildcards.Gene
        ## Get transcript ID for every GeneID
        if GENE in FOUND_GENES:
        
            with open('Workspace/1_Gene_IDs/{}/{}'.format(ORG,GENE)) as f:
                GENE_ID = f.readline().strip()
            
            ISOFORM=ISOFORMS[GENE]
            if isinstance(ISOFORM, list)==1:
                ISOFORM=','.join(ISOFORM)

            shell('''python3 Python_Scripts/Search_Ensembl.py {} {} {} {}'''.format(GENE,GENE_ID,ORG,ISOFORM)) 

        ## For missing GeneIDs make dummy in its place
        if GENE in MISSING_GENES:
            shell('''touch Workspace/2_Transcript_IDs/{}/{} '''.format(ORG,GENE))
        time.sleep(SLEEPER)

rule Get_Ensembl_Transcript_IDs_ALL:
    input:
        expand("Workspace/1_Gene_IDs/{Organism}/{Gene}",Gene=GENES,Organism=set(ORGANISM))







#### Use TRANSCRIPT ID to get Fasta sequence of protein




           
rule Get_FASTA_Sequence_from_Transcript_ID:
    input:
        "Workspace/2_Transcript_IDs/{Organism}/{Gene}"
    output:
        "Workspace/3_FASTA_Seqs/Genes_{Organism}/{Gene}.fa"
    resources:
        FTP=1
    run:
        ORG=wildcards.Organism  
        GENE=wildcards.Gene
        
        #Check if path for organism exists/create it
        path='Workspace/3_FASTA_Seqs/Genes_'+str(ORG)
        if os.path.exists(path)==False:
            os.makedirs(path)
        else:### Empty any files previously existing Isoforms for gene
            shell(F'''rm -rf Workspace/3_FASTA_Seqs/Genes_{ORG}/{GENE}-*.fa ''')
        #for each gene grab the transcript ID and use a script to get the AA fasta seq for it, ##### check some isoforms don't have a protein sequence! - maybe add them to 'missing' proteins
        
            
        TRNSCRPT_FILE=open('Workspace/2_Transcript_IDs/{}/{}'.format(ORG,GENE),'r')
        IS_EMPTY=os.stat('Workspace/2_Transcript_IDs/{}/{}'.format(ORG,GENE)).st_size
        
        if IS_EMPTY>0:
            for TRNSCRPT in TRNSCRPT_FILE:
                TRNSCRPT_ID=TRNSCRPT.strip().split('::')[0]
                TRNSCRPT_NAME=TRNSCRPT.strip().split('::')[1]
                shell('''python3  Python_Scripts/Get_Prot_Sequence_Ensembl.py {} {} {} {}'''.format(GENE,TRNSCRPT_ID,ORG,TRNSCRPT_NAME))
                time.sleep(2)
            

            
                
        if IS_EMPTY==0:
            TRNSCRPT_ID=''
            TRNSCRPT_NAME=''
            shell('''python3  Python_Scripts/Get_Prot_Sequence_Ensembl.py {} {} {} {}'''.format(GENE,TRNSCRPT_ID,ORG,TRNSCRPT_NAME))
            time.sleep(2)
        
        
        if (exists("Workspace/3_FASTA_Seqs/Genes_{}/{}.fa".format(ORG,GENE))!=True):
            shell("""touch Workspace/3_FASTA_Seqs/Genes_{}/{}.fa""".format(ORG,GENE))
            
        time.sleep(SLEEPER)
        





rule Get_ALL_FASTA_Sequence_from_Transcript_ID:
    input:
        expand("Workspace/2_Transcript_IDs/{organism}/{sample}",sample=GENES,organism=set(ORGANISM))
    resources:
        FTP=1





#### Use TRANSCRIPT ID to create Intron - Exon Table








rule Get_Exon_Intron_Table_from_Transcript_ID:
    input:
        "Workspace/2_Transcript_IDs/{Organism}/{Gene}"
    output:
        "Workspace/4_EITs/{Organism}/{Gene}_ei.txt"
    resources:
        FTP=1
    run:
        ORG=wildcards.Organism
        GENE=wildcards.Gene
        #Check if path for organism exists/create it
        path='Workspace/4_EITs/'+str(ORG)
        if os.path.exists(path)==False:
            os.makedirs(path)
        else:### Empty isoform files for that gene
            shell(F'''rm -rf Workspace/4_EITs/{ORG}/{GENE}-*_ei.txt''')
            
        TRNSCRPT_FILE=open('Workspace/2_Transcript_IDs/{}/{}'.format(ORG,GENE),'r')
        IS_EMPTY=os.stat('Workspace/2_Transcript_IDs/{}/{}'.format(ORG,GENE)).st_size
        
        if IS_EMPTY>0:
            for TRNSCRPT in TRNSCRPT_FILE:
                TRNSCRPT_ID=TRNSCRPT.strip().split('::')[0]
                TRNSCRPT_NAME=TRNSCRPT.strip().split('::')[1]
                shell('''python3 Python_Scripts/Get_Exon_Intron_Table.py {} {} {} {}'''.format(GENE,TRNSCRPT_ID,ORG,TRNSCRPT_NAME))
                time.sleep(2)
            
        if IS_EMPTY==0:
            TRNSCRPT_ID=''
            TRNSCRPT_NAME=''
            shell('''python3 Python_Scripts/Get_Exon_Intron_Table.py {} {} {} {}'''.format(GENE,TRNSCRPT_ID,ORG,TRNSCRPT_NAME))
            time.sleep(2)
        
        if (exists("Workspace/4_EITs/{}/{}_ei.txt".format(ORG,GENE))!=True):
            shell("""touch Workspace/4_EITs/{}/{}_ei.txt""".format(ORG,GENE))
        
        
            
        time.sleep(SLEEPER)





rule Get_ALL_Exon_Intron_Table_from_Transcript_ID:
    input:
        expand("Workspace/2_Transcript_IDs/{organism}/{sample}",sample=GENES,organism=set(ORGANISM))
    resources:
        FTP=1








#### Use TRANSCRIPT ID to get location info of the gene/protein




rule Get_Location_Info_from_Ensemble_Gene_ID_ALL:
    input:
        expand("Workspace/2_Transcript_IDs/{{Organism}}/{Gene}",Gene=GENES)
    output:
        "Workspace/5_Loc_Files/{Organism}/{Reference}/starts.txt",
        "Workspace/5_Loc_Files/{Organism}/{Reference}/Gene_locs.txt"
    resources:
        FTP=1
    run:
        ORG=wildcards.Organism
        REF=wildcards.Reference

        ########Check if path for organism exists/create it
        path='Workspace/5_Loc_Files/'+str(ORG)+'/'+str(REF)
        if os.path.exists(path)==False:
            os.makedirs(path)
        for GENE in GENES:
            
            TRANSCRIPT_FILE=open('Workspace/2_Transcript_IDs/{}/{}'.format(ORG,GENE),'r')
            for TRANSCRIPT in TRANSCRIPT_FILE:
            
                TRNSCRPT_ID=TRANSCRIPT.strip().split('::')[0]
                TRNSCRPT_NAME=TRANSCRIPT.strip().split('::')[1]
                
                shell('''python3 Python_Scripts/Get_Assembly_Location.py {} {} {} {} {}'''.format(GENE,TRNSCRPT_ID,ORG,REF,TRNSCRPT_NAME))
                time.sleep(2)
        
        if (exists('Workspace/5_Loc_Files/{}/{}/Gene_locs.txt'.format(ORG,REF))!=True):
            shell("""touch Workspace/5_Loc_Files/{}/{}/Gene_locs.txt""".format(ORG,REF))
            
        if (exists('Workspace/5_Loc_Files/{}/{}/starts.txt'.format(ORG,REF))!=True):
            shell("""touch Workspace/5_Loc_Files/{}/{}/starts.txt""".format(ORG,REF))
        
        time.sleep(SLEEPER)





rule Get_ALL_Location_Info_from_Ensemble_Gene_ID_ALL:
    input:
        expand("Workspace/2_Transcript_IDs/{Organism}/{Gene}",Gene=GENES,Organism=set(ORGANISM))
    resources:
        FTP=1





#### Combine all Fasta sequences  into a reference dataset




rule Combine_FASTA_Sequences_into_Ref:
    input:
        expand("Workspace/3_FASTA_Seqs/Genes_{Organism}/{Gene}.fa",Gene=GENES,Organism=set(ORGANISM))
    output:
        expand("Workspace/3_FASTA_Seqs/Combined_Per_Species/{Organism}.fa",Organism=set(ORGANISM)),
        expand("Workspace/3_FASTA_Seqs/Combined_Per_Protein/{Gene}.fa",Gene=GENES),
        'Workspace/3_FASTA_Seqs/All_Sequences.fa'
    run:
        path='Workspace/3_FASTA_Seqs/Combined_Per_Species/'
        if os.path.exists(path)==False:
            os.makedirs(path)
            
        path2='Workspace/3_FASTA_Seqs/Combined_Per_Protein/'
        if os.path.exists(path2)==False:
            os.makedirs(path2)
        
        
        
        
        
        
        #### Cleanup All proteins file
        shell('''rm -rf  Workspace/3_FASTA_Seqs/All_Sequences.fa;''')
        for ORG in list(set(ORGANISM)): 
            ### Cleanup Species File
            shell('''rm -rf  Workspace/3_FASTA_Seqs/Combined_Per_Species/{}.fa;'''.format(ORG))
            
        for GENE in GENES: 
            #### Cleanup Gene file
            shell('''rm -rf  Workspace/3_FASTA_Seqs/Combined_Per_Protein/{}.fa;'''.format(GENE))
            
            TRANSCRIPT_FILE=open('Workspace/2_Transcript_IDs/{}/{}'.format(ORG,GENE),'r')
            for TRANSCRIPT in TRANSCRIPT_FILE:
                TRNSCRPT_NAME=TRANSCRIPT.strip().split('::')[1]
                #### Cleanup Transcript files
                shell('''rm -rf  Workspace/3_FASTA_Seqs/Combined_Per_Protein/{}.fa;'''.format(TRNSCRPT_NAME))
        
        
        
        
        #### Organise Combined Files, Per Species, Per Protein and Per Isoform
        for ORG in list(set(ORGANISM)):
            
            
            
            for GENE in GENES:
                
                
            
            
                shell('''cat Workspace/3_FASTA_Seqs/Genes_{}/{}.fa >>Workspace/3_FASTA_Seqs/Combined_Per_Species/{}.fa;'''.format(ORG,GENE,ORG))                
                shell('''echo "\n" >>Workspace/3_FASTA_Seqs/Combined_Per_Species/{}.fa;'''.format(ORG,GENE,ORG))                
                
                
                shell('''cat Workspace/3_FASTA_Seqs/Genes_{}/{}.fa >>Workspace/3_FASTA_Seqs/Combined_Per_Protein/{}.fa;'''.format(ORG,GENE,GENE))
                shell('''echo "\n" >>Workspace/3_FASTA_Seqs/Combined_Per_Protein/{}.fa;'''.format(GENE))

                shell('''cat Workspace/3_FASTA_Seqs/Genes_{}/{}.fa >>Workspace/3_FASTA_Seqs/All_Sequences.fa;'''.format(ORG,GENE))
                shell('''echo "\n" >>Workspace/3_FASTA_Seqs/All_Sequences.fa;''')
                
                TRANSCRIPT_FILE=open('Workspace/2_Transcript_IDs/{}/{}'.format(ORG,GENE),'r')
                IS_EMPTY=os.stat('Workspace/2_Transcript_IDs/{}/{}'.format(ORG,GENE)).st_size
                if IS_EMPTY>0:
                    for TRANSCRIPT in TRANSCRIPT_FILE:
                        TRNSCRPT_NAME=TRANSCRIPT.strip().split('::')[1]
                        
                        
                        
                        
                        shell('''cat Workspace/3_FASTA_Seqs/Genes_{}/{}.fa >>Workspace/3_FASTA_Seqs/Combined_Per_Species/{}.fa;'''.format(ORG,TRNSCRPT_NAME,ORG)) 
                        shell('''echo "\n" >>Workspace/3_FASTA_Seqs/Combined_Per_Species/{}.fa;'''.format(ORG))                
                        
                        
                        shell('''cat Workspace/3_FASTA_Seqs/Genes_{}/{}.fa >>Workspace/3_FASTA_Seqs/Combined_Per_Protein/{}.fa;'''.format(ORG,TRNSCRPT_NAME,TRNSCRPT_NAME))
                        shell('''echo "\n" >>Workspace/3_FASTA_Seqs/Combined_Per_Protein/{}.fa;'''.format(TRNSCRPT_NAME))
                        
                        shell('''cat Workspace/3_FASTA_Seqs/Genes_{}/{}.fa >>Workspace/3_FASTA_Seqs/All_Sequences.fa;'''.format(ORG,TRNSCRPT_NAME))
                        shell('''echo "\n" >>Workspace/3_FASTA_Seqs/All_Sequences.fa;''')