#Run using snakemake -j1 --latency-wait 120 --use-conda


#Dependancies to be used - R / Rpackages: ShortRead / angsd / blast-legacy (v2.2.26) / blast (v2.2.31)
#conda env export --from-history > environment.yaml
#conda env create --name testenv --file environment.yaml


import os
import os.path



##### Load Input Files and usefull info  #####
#####


##############################################
#Check if user provided organism and assembly
ORGANISM_FILE='Organism.txt'
if os.path.exists(ORGANISM_FILE)==True:
    ORGANISM_FILE=open('Organism.txt','r')
    LINE=ORGANISM_FILE.readline().strip().split()
    ORGANISM=LINE[0]
    if len(LINE)>=2:
        ASSEMBLY=LINE[1]
    if len(LINE)==1:
        ASSEMBLY='CURRENT'

print(ORGANISM,ASSEMBLY)


###########################
#Load Samples for Translation


SAMPLES=[]
SAMPLE_FILE=open('Samples.txt','r') 
for line in SAMPLE_FILE:
    SAMPLES.append(line.strip())
print(SAMPLES)





#################################
###                        


CHROMOSOMES=[]
GENES=[]
GENES_TO_REFERENCES={}


GENE_LOCS_PATH='Gene_locs.txt'

##################################################
##Check if Gene_locs exist, if yes just load them
if os.path.exists(GENE_LOCS_PATH)==True:
    GENE_LOCS=open("Gene_locs.txt","r")

########
##If it doesn't exist, the user want to use their own generated Gene Locs from the Initiator pipeline
##Possibilities:


##If it does not exist AND the user failed to provide a reference organism, raise error
if (os.path.exists(GENE_LOCS_PATH)==False) and (os.path.exists('Organism.txt')==False):
    raise NameError('No Gene_locs.txt file provided and no Organism.txt provided to create the Gene_locs.txt\n Please run the Dataset_Initialization pipeline with a target organism + protein set if you have not already./n If you already have done that, just create an Organism.txt file here with one selected organism for which that pipeline has run!')

##If it does not exist AND the user has provided a reference organism, but has not run the first pipeline for it, raise error
if (os.path.exists(GENE_LOCS_PATH)==False) and (os.path.exists('Organism.txt')==True) and ( os.path.exists(os.path.abspath(os.path.join(os.pardir,'Dataset_Initialization/Workspace/5_Loc_Files/{}/{}'.format(ORGANISM,ASSEMBLY))) ) == False ):   
    raise NameError('There was an error, either you have not run the Dataset_Initialization pipeline for this organism or there was a typo in the name/assembly.\n\n Here are your inputs: {} {} , check if they exists in Dataset_Initialization/Workspace/5_Loc_Files/ \n\nRemember to switch Conda enviroments when running each pipeline\n'.format(ORGANISM,ASSEMBLY))

##If not then copy all resources from Dataset_Initialization
if (os.path.exists(GENE_LOCS_PATH)==False) and (os.path.exists('Organism.txt')==True):

    # Copy over the appropriate Gene_locs file
    os.system('cp ../Dataset_Initialization/Workspace/5_Loc_Files/{}/{}/Gene_locs.txt ./'.format(ORGANISM,ASSEMBLY))
    GENE_LOCS=open("Gene_locs.txt","r")
    
    # Copy over the appropriate starts file
    os.system('cp ../Dataset_Initialization/Workspace/5_Loc_Files/{}/{}/starts.txt ./'.format(ORGANISM,ASSEMBLY))
    
    # Clean up EIT folder and Copy over the appropriate exons/intron tables
    os.system('rm EIT/*_ei.txt')
    os.system('cp ../Dataset_Initialization/Workspace/4_EITs/{}/*_ei.txt ./EIT/'.format(ORGANISM))
    
    # Clean up FASTA folder and Copy over the appropriate fasta files
    os.system('rm Genes/*.fa')
    os.system('cp ../Dataset_Initialization/Workspace/3_FASTA_Seqs/Genes_{}/*.fa ./Genes/'.format(ORGANISM))







####
#Finally
#### Open Gene Locs and get the chromosomes corresponding to the proteins
for line in GENE_LOCS:
    line=line.strip().split()
    CHROMOSOMES.append(line[1])
    GENES.append(line[0])
    GENES_TO_REFERENCES[line[0]]=line[4]
    



CHROMOSOMES=list(set(CHROMOSOMES))
CHROMOSOMES.sort()














#######################################################################################################################################################################
#######################################################################################################################################################################
## Starting Rule

rule all:
    input:
        expand("Workspace/9_FINAL_OUTPUT/ALL_PROT_REFERENCE.fa"),
        expand("Workspace/9_FINAL_OUTPUT/PER_PROTEIN/{GENE}_PROT_REFERENCE.fa",GENE=GENES),
        expand("Workspace/9_FINAL_OUTPUT/PER_SAMPLE/{sample}_PROT_REFERENCE.fa",sample=SAMPLES)




#######################################################################################################################################################################
## Data Pipeline ##

## If bam file input is missing, search for a cram file alternative, convert that to a bam
#samtools view -b -@ 32 -o NA12778.final.bam NA12778.final.cram
rule Cram_to_bam:
    input:
        "Workspace/1_OG_BAM_FILES/{sample}.cram"
    output:
        "Workspace/1_OG_BAM_FILES/{sample}.bam"
    threads:32
    shell:"samtools view -b -@ 32 -o {output} {input}"





#Make sure bam file has correct chromosome naming scheme

rule format_name:
    input:
        "Workspace/1_OG_BAM_FILES/{sample}.bam"
    output:
        "Workspace/2_FORMATTED_BAM/{sample}_FRMT.bam"
    threads:32
    shell: 
        """samtools view -H {input} --threads={threads} |\
        sed -e 's/SN:chr1/SN:1/' | sed -e 's/SN:chr2/SN:2/' | \
        sed -e 's/SN:chr3/SN:3/' | sed -e 's/SN:chr4/SN:4/' | \
        sed -e 's/SN:chr5/SN:5/' | sed -e 's/SN:chr6/SN:6/' | \
        sed -e 's/SN:chr7/SN:7/' | sed -e 's/SN:chr8/SN:8/' | \
        sed -e 's/SN:chr9/SN:9/' | sed -e 's/SN:chr10/SN:10/' | \
        sed -e 's/SN:chr11/SN:11/' | sed -e 's/SN:chr12/SN:12/' | \
        sed -e 's/SN:chr13/SN:13/' | sed -e 's/SN:chr14/SN:14/' | \
        sed -e 's/SN:chr15/SN:15/' | sed -e 's/SN:chr16/SN:16/' | \
        sed -e 's/SN:chr17/SN:17/' | sed -e 's/SN:chr18/SN:18/' | \
        sed -e 's/SN:chr19/SN:19/' | sed -e 's/SN:chr20/SN:20/' | \
        sed -e 's/SN:chr21/SN:21/' | sed -e 's/SN:chr22/SN:22/' | \
        sed -e 's/SN:chrX/SN:X/' | sed -e 's/SN:chrY/SN:Y/' | \
        sed -e 's/SN:chrM/SN:MT/' | samtools reheader - {input} > {output};"""



#Re-Index it
rule format_index_name:
    input:
        "Workspace/2_FORMATTED_BAM/{sample}_FRMT.bam"
    output:
        "Workspace/2_FORMATTED_BAM/{sample}_FRMT.bam.bai"
    shell:
        "samtools index -b {input} -@ {threads}"









#Input for spliting: Is it one bam files with all chromosomes or split up into smaller bam files (per chromosome)
def my_inputs(samples,chromosomes):
    
    sample_list=[]
    
    for S in samples:
        
        
        path='Workspace/1_OG_BAM_FILES/' + str(S) + '.bam'
        path2='Workspace/1_OG_BAM_FILES/' + str(S) + '.cram'
        
        if (os.path.isfile(path) or os.path.isfile(path2))==True:
            S='Workspace/2_FORMATTED_BAM/'+ str(S) +'_FRMT.bam'
            sample_list.append(S)
    
        if (os.path.isfile(path) and os.path.isfile(path2))==False:
        
            Bam_List=[] #file paths for individual chromosomes 
            Check_List=[] #check if any chromosomes bams are missing
            
            for CHR in chromosomes:
                path1='Workspace/1_OG_BAM_FILES/' + str(S) +'_{}'.format(CHR) + '.bam' #possible naming scheme 1
                
                if (os.path.isfile(path1))==True:
                    Bam_List.append(path1)

                else:
                    Check_List.append(CHR)

            sample_list.append(Bam_List)
                

    
    return sample_list


#Same for .bai files
def my_inputs2(samples,chromosomes):
    
    sample_list=[]
    
    for S in samples:
        
        
        path='Workspace/1_OG_BAM_FILES/' + str(S) + '.bam'
        
        if (os.path.isfile(path) or os.path.isfile(path2))==True:
            S='Workspace/2_FORMATTED_BAM/'+ str(S) +'_FRMT.bam.bai'
            sample_list.append(S)

    
    return sample_list











#Split it into target chromosomes if one bam file, format each bam file if already split into chromosomes
rule format_split_into_chromosomes:
    input:
        BAM=my_inputs(SAMPLES,CHROMOSOMES),
        BAI=my_inputs2(SAMPLES,CHROMOSOMES),
        GENE_LOCS="Gene_locs.txt",
    output:
        expand("Workspace/3_SPLIT_CHR/{sample}_FRMT_{CHR}.bam", CHR=CHROMOSOMES,sample=SAMPLES),
        expand("Workspace/3_SPLIT_CHR/{sample}_FRMT_{CHR}.bam.bai", CHR=CHROMOSOMES,sample=SAMPLES)
    
    threads:32
    
    run:
        
        for S in input.BAM:
        
            SAMPLE_HERE=S.split('/')[-1]
            SAMPLE_HERE='_'.join(SAMPLE_HERE.split('_')[0:-1])            
                    
            if ('_FRMT' in S) == False:
                
                CHR=S.split('/')[-1]
                CHR=(CHR.split('.')[0]).split('_')[-1]
                print('Sample {} is already split into Chromosome-level-Bams.\n Processing Bam file {} which should correspond to chromosome {}.'.format(SAMPLE_HERE,S,CHR))
                
                shell("""samtools index -b {} -@ {}""".format(S,threads)) #make sure its indexed
                
                shell("""samtools view -H {} --threads={} | sed -e 's/SN:chr{}/SN:{}/' | samtools reheader - {} > Workspace/3_SPLIT_CHR/{}_FRMT_{}.bam;""".format(S,threads,CHR,CHR,S,SAMPLE_HERE,CHR)) #format it
                
                shell("""samtools index -b Workspace/3_SPLIT_CHR/{}_FRMT_{}.bam -@ {};""".format(SAMPLE_HERE,CHR,threads)) #Re-index it


            if ('_FRMT' in S) == True:
                for CHR in CHROMOSOMES:
                    print('Sample {} will now be split into Chromosome-level-Bams.\n Processing chromosome {}.'.format(SAMPLE_HERE,CHR))
                    
                    shell("""samtools view -b Workspace/2_FORMATTED_BAM/{}_FRMT.bam {} > Workspace/3_SPLIT_CHR/{}_FRMT_{}.bam --threads={}; """.format(SAMPLE_HERE,CHR,SAMPLE_HERE,CHR,threads))
                    
                    shell("""samtools index -b Workspace/3_SPLIT_CHR/{}_FRMT_{}.bam -@ {};  """.format(SAMPLE_HERE,CHR,threads))







#Use ANGSD to transform to fasta
rule from_bam_to_fasta_ANGSD:
    input:
        expand("Workspace/3_SPLIT_CHR/{sample}_FRMT_{CHR}.bam",CHR=CHROMOSOMES,sample=SAMPLES),
        expand("Workspace/3_SPLIT_CHR/{sample}_FRMT_{CHR}.bam.bai",CHR=CHROMOSOMES,sample=SAMPLES)
    output:
        expand("Workspace/4_FASTA_FILES/{sample}_FRMT_{CHR}.fa.gz",CHR=CHROMOSOMES,sample=SAMPLES)
    
    threads: 32

    run:
        
        ###If user does not define any samples as ancient, using a txt file named 'Ancient_Samples.txt', treat all samples as modern
        if (os.path.isfile('Ancient_Samples.txt')==False):
            COMMANDS=expand("""angsd -nThreads {THRDS} -minQ 20 -minMapQ 30 -doFasta 2 -doCounts 1 -basesPerLine 60 -i Workspace/3_SPLIT_CHR/{sample}_FRMT_{CHR}.bam -r {CHR} -out Workspace/4_FASTA_FILES/{sample}_FRMT_{CHR};""",THRDS=threads,CHR=CHROMOSOMES,sample=SAMPLES)
        
        #If there are samples defined as ancient, 2 lists, one of ancient samples and one of modern ones
        if (os.path.isfile('Ancient_Samples.txt')==True):
            
            #Make a list with all the ancient samples
            ANCIENT_SAMPLES=[]
            ANCIENT_SAMPLE_FILE=open('Ancient_Samples.txt','r') 
            for line in ANCIENT_SAMPLE_FILE:
                ANCIENT_SAMPLES.append(line.strip())
            COMMANDS=[]
            COMMANDS2=[]
            if [x for x in SAMPLES if x not in ANCIENT_SAMPLES]!=[]:
                COMMANDS=expand("""angsd -nThreads {THRDS} -minQ 20 -minMapQ 30 -doFasta 2 -doCounts 1 -basesPerLine 60 -i Workspace/3_SPLIT_CHR/{sample}_FRMT_{CHR}.bam -r {CHR} -out Workspace/4_FASTA_FILES/{sample}_FRMT_{CHR};""",THRDS=threads,CHR=CHROMOSOMES,sample=[x for x in SAMPLES if x not in ANCIENT_SAMPLES])
            if [x for x in SAMPLES if x in ANCIENT_SAMPLES]!=[]:
                COMMANDS2=expand("""angsd -nThreads {THRDS} -minQ 20 -minMapQ 30 -doFasta 1 -doCounts 1 -basesPerLine 60 -i Workspace/3_SPLIT_CHR/{sample}_FRMT_{CHR}.bam -r {CHR} -out Workspace/4_FASTA_FILES/{sample}_FRMT_{CHR};""",THRDS=threads,CHR=CHROMOSOMES,sample=[x for x in SAMPLES if x in ANCIENT_SAMPLES])
            COMMANDS=COMMANDS+COMMANDS2
            
        for CMD in COMMANDS:
            shell(CMD)
        #check to see if all files were made. EG if a sample lacks a Y chromosome angsd wont run for that one and wont make the file
        #, thus we make a dummy file in its place so that the pipeline does nto crash!
        for sample in SAMPLES:
            for CHR in CHROMOSOMES:
                path='./Workspace/4_FASTA_FILES/{}_FRMT_{}.fa.gz'.format(sample,CHR)

                if os.path.exists(path)==False:
                    shell('cp ./Workspace/1_OG_BAM_FILES/dummy.fa ./Workspace/4_FASTA_FILES/{}_FRMT_{}.fa'.format(sample,CHR))
                    shell('gzip ./Workspace/4_FASTA_FILES/{}_FRMT_{}.fa'.format(sample,CHR))



#######################################################################################################################################################################
##Actual DNA to Proteins Translation ##

#Use custom R scripts
#Isolate Gene segment from chromosome fasta


rule Isolate_Gene_from_fasta:
    input:
        expand("Workspace/4_FASTA_FILES/{sample}_FRMT_{CHR}.fa.gz",CHR=CHROMOSOMES,sample=SAMPLES)
    output:
        expand("Workspace/5_GENE_FASTA_FILES/{sample}_FRMT_{GENE}.fa",GENE=GENES,sample=SAMPLES)

    run:
        COMMANDS=expand("""Rscript ./R\ scripts/Rscript1.r Workspace/4_FASTA_FILES/{sample}_FRMT_{CHR}.fa.gz Gene_locs.txt Workspace/5_GENE_FASTA_FILES/;""",CHR=CHROMOSOMES,sample=SAMPLES)
        for CMD in COMMANDS:
            shell(CMD)


#Splice Gene segment from gene fasta, keep exones

rule Splice_Genes:
    input:
        expand("Workspace/5_GENE_FASTA_FILES/{sample}_FRMT_{GENE}.fa",GENE=GENES,sample=SAMPLES)
    output:
        expand("Workspace/6_SPLICED_GENE_FILES/{sample}_FRMT_{GENE}_spliced.fa",GENE=GENES,sample=SAMPLES)

    run:
        COMMANDS=expand("""Rscript ./R\ scripts/Rscript2.r Workspace/5_GENE_FASTA_FILES/{sample}_FRMT_{GENE}.fa starts.txt ./EIT/ Workspace/6_SPLICED_GENE_FILES/ ;""",GENE=GENES,sample=SAMPLES)
        for CMD in COMMANDS:
            shell(CMD)



rule Translate_through_blastools:
    input:
        expand("Workspace/6_SPLICED_GENE_FILES/{sample}_FRMT_{GENE}_spliced.fa",GENE=GENES,sample=SAMPLES)
    output:
        expand("Workspace/7_BLASTED_GENES/{sample}_FRMT_{GENE}_spliced.blast",GENE=GENES,sample=SAMPLES)
    run:
        COMMANDS1=expand("""makeblastdb -dbtype nucl -in Workspace/6_SPLICED_GENE_FILES/{sample}_FRMT_{GENE}_spliced.fa;""",GENE=GENES,sample=SAMPLES)
        
        
        for CMD in COMMANDS1:
            shell(CMD)
        for GENE in GENES:
            for sample in SAMPLES:
                shell("""blastall  -p tblastn -i ./Genes/{}  -d Workspace/6_SPLICED_GENE_FILES/{}_FRMT_{}_spliced.fa -o Workspace/7_BLASTED_GENES/{}_FRMT_{}_spliced.blast -F F -E 32767 -G 32767 -n T -m 0 -M PAM70;""".format(GENES_TO_REFERENCES[GENE],sample,GENE,sample,GENE))
                


rule Extract_blastools_output:
    input:
        expand("Workspace/7_BLASTED_GENES/{sample}_FRMT_{GENE}_spliced.blast",GENE=GENES,sample=SAMPLES)
    output:
        expand("Workspace/8_PROTEINS_FASTAS/{sample}_FRMT_{GENE}_translated.fa",GENE=GENES,sample=SAMPLES)
    run:
        COMMANDS1=expand("""Rscript R\ scripts/Rscript3.r Workspace/7_BLASTED_GENES/{sample}_FRMT_{GENE}_spliced.blast Workspace/8_PROTEINS_FASTAS/ ;""",GENE=GENES,sample=SAMPLES)
        for CMD in COMMANDS1:
            shell(CMD)
            
            
rule Assemble_protein_dataset:
    input:
        expand("Workspace/8_PROTEINS_FASTAS/{sample}_FRMT_{GENE}_translated.fa",GENE=GENES,sample=SAMPLES)
    output:
        expand("Workspace/9_FINAL_OUTPUT/ALL_PROT_REFERENCE.fa"),
        expand("Workspace/9_FINAL_OUTPUT/PER_PROTEIN/{GENE}_PROT_REFERENCE.fa",GENE=GENES),
        expand("Workspace/9_FINAL_OUTPUT/PER_SAMPLE/{sample}_PROT_REFERENCE.fa",sample=SAMPLES)
    run:
        COMMANDS1=expand("""touch Workspace/9_FINAL_OUTPUT/PER_PROTEIN/{GENE}_PROT_REFERENCE.fa; cat Workspace/8_PROTEINS_FASTAS/*_{GENE}_translated.fa >>Workspace/9_FINAL_OUTPUT/PER_PROTEIN/{GENE}_PROT_REFERENCE.fa; """,GENE=GENES)
        COMMANDS2=expand("""touch Workspace/9_FINAL_OUTPUT/PER_SAMPLE/{sample}_PROT_REFERENCE.fa; cat Workspace/8_PROTEINS_FASTAS/{sample}_FRMT_*_translated.fa >>Workspace/9_FINAL_OUTPUT/PER_SAMPLE/{sample}_PROT_REFERENCE.fa; """,sample=SAMPLES)
        
        for CMD in COMMANDS1:
            shell(CMD)
        for CMD in COMMANDS2:
            shell(CMD)    
        shell(""" cat Workspace/8_PROTEINS_FASTAS/*_translated.fa >>Workspace/9_FINAL_OUTPUT/ALL_PROT_REFERENCE.fa; """)    
        