#Run using snakemake -j1 --latency-wait 120 --use-conda

#### conda install -c conda-forge -c bioconda  openssl=1.1 bioconductor-shortread angsd blast samtools bcftools biopython snakemake
#Dependancies to be used - R / Rpackages: snakemake / ShortRead / angsd  / blast  /samtools / bcftools / biopython
#conda env export --from-history > environment.yaml
#conda env create --name testenv --file environment.yaml


import os
import os.path
import filecmp


##### Load Input Files and usefull info  #####
#####


##############################################
#Check if user provided organism and assembly
ORGANISM_FILE='Organism.txt'
if os.path.exists(ORGANISM_FILE)==True:
    ORGANISM_FILE=open('Organism.txt','r')
    LINE=ORGANISM_FILE.readline().strip().split()
    ORGANISM=LINE[0]
    if len(LINE)>=2:
        ASSEMBLY=LINE[1]
    if len(LINE)==1:
        ASSEMBLY='CURRENT'

print(ORGANISM,ASSEMBLY)





###########################
#Load Samples for Translation


SAMPLES=[]

if os.path.exists('Samples.txt')==True:
    SAMPLE_FILE=open('Samples.txt','r') 
    for line in SAMPLE_FILE:
        line=line.strip().split('.')
        line='.'.join(line[0:len(line)])
        if line!='':
            SAMPLES.append(line)



###########################
#Are there samples from VCF? If yes load them
VCF_SAMPLE_FILE='VCF_Samples.txt'
VCF_SAMPLES={}

if os.path.exists(VCF_SAMPLE_FILE)==True:
    
    VCF_SAMPLE_FILE=open(VCF_SAMPLE_FILE,'r')
    for line in VCF_SAMPLE_FILE:
        line=line.strip().split()
        if len(line)<3:
            print(F'ERROR: sample {line} has less than 3 entries. Please use this format: Sample_Name Sample_VCF_file Sample_Reference')
        else:
            VCF_SAMPLES[line[0]]=[ 'Workspace/0_VCF_FILES/'+line[1] , 'Reference/'+line[2] ]
            SAMPLES.append(line[0])


SAMPLES=list(set(SAMPLES))
print(VCF_SAMPLES)
print(SAMPLES)


#################################
###                        


CHROMOSOMES=[]
GENES=[]
GENES_TO_REFERENCES={}


GENE_LOCS_PATH='Gene_locs.txt'

##################################################
##Check if Gene_locs exist, if yes just load them
if (os.path.exists(GENE_LOCS_PATH)==True) and (os.path.exists('Organism.txt')==False):
    GENE_LOCS=open("Gene_locs.txt","r")
    

## If it exists but there's also an Organism.txt file that is not empy:
if (os.path.exists(GENE_LOCS_PATH)==True) and (os.path.exists('Organism.txt')==True):
    print(os.stat('Organism.txt').st_size)
    if ((os.stat('Organism.txt').st_size)!=0):
        if (filecmp.cmp("Gene_locs.txt","../Dataset_Initialization/Workspace/5_Loc_Files/{}/{}/Gene_locs.txt".format(ORGANISM,ASSEMBLY))==False):
            ## Copy over the appropriate Gene_locs file
            os.system('cp ../Dataset_Initialization/Workspace/5_Loc_Files/{}/{}/Gene_locs.txt ./'.format(ORGANISM,ASSEMBLY))
            GENE_LOCS=open("Gene_locs.txt","r")
            
            ## Copy over the appropriate starts file
            os.system('cp ../Dataset_Initialization/Workspace/5_Loc_Files/{}/{}/starts.txt ./'.format(ORGANISM,ASSEMBLY))
            
            ## Clean up EIT folder and Copy over the appropriate exons/intron tables

            os.system('cp ../Dataset_Initialization/Workspace/4_EITs/{}/*_ei.txt ./EIT/'.format(ORGANISM))
        else:
            GENE_LOCS=open("Gene_locs.txt","r")
        if os.path.exists('Genes')==False:
            os.makedirs('Genes')
        os.system('cp ../Dataset_Initialization/Workspace/3_FASTA_Seqs/Genes_{}/*.fa ./Genes/'.format(ORGANISM))
        
        
        
        
########
##If it doesn't exist, the user want to use their own generated Gene Locs from the Initiator pipeline
##Possibilities:


##If it does not exist AND the user failed to provide a reference organism, raise error
if (os.path.exists(GENE_LOCS_PATH)==False) and (os.path.exists('Organism.txt')==False):
    raise NameError('No Gene_locs.txt file provided and no Organism.txt provided to create the Gene_locs.txt\n Please run the Dataset_Initialization pipeline with a target organism + protein set if you have not already./n If you already have done that, just create an Organism.txt file here with one selected organism for which that pipeline has run!')



##If it does not exist AND the user has provided a reference organism, but has not run the first pipeline for it, raise error
if (os.path.exists(GENE_LOCS_PATH)==False) and (os.path.exists('Organism.txt')==True) and ( os.path.exists(os.path.abspath(os.path.join(os.pardir,'Dataset_Initialization/Workspace/5_Loc_Files/{}/{}'.format(ORGANISM,ASSEMBLY))) ) == False ):   
    raise NameError('There was an error, either you have not run the Dataset_Initialization pipeline for this organism or there was a typo in the name/assembly.\n\n Here are your inputs: {} {} , check if they exists in Dataset_Initialization/Workspace/5_Loc_Files/ \n\nRemember to switch Conda enviroments when running each pipeline\n'.format(ORGANISM,ASSEMBLY))




##If not then copy all resources from Dataset_Initialization
if (os.path.exists(GENE_LOCS_PATH)==False) and (os.path.exists('Organism.txt')==True):

    # Copy over the appropriate Gene_locs file
    os.system('cp ../Dataset_Initialization/Workspace/5_Loc_Files/{}/{}/Gene_locs.txt ./'.format(ORGANISM,ASSEMBLY))
    GENE_LOCS=open("Gene_locs.txt","r")
    
    # Copy over the appropriate starts file
    os.system('cp ../Dataset_Initialization/Workspace/5_Loc_Files/{}/{}/starts.txt ./'.format(ORGANISM,ASSEMBLY))
    
    # Clean up EIT folder and Copy over the appropriate exons/intron tables

    os.system('cp ../Dataset_Initialization/Workspace/4_EITs/{}/*_ei.txt ./EIT/'.format(ORGANISM))
    
    # Clean up FASTA folder and Copy over the appropriate fasta files
    
    if os.path.exists('Genes')==False:
        os.makedirs('Genes')
    os.system('cp ../Dataset_Initialization/Workspace/3_FASTA_Seqs/Genes_{}/*.fa ./Genes/'.format(ORGANISM))








####
#Finally
#### Open Gene Locs and get the chromosomes corresponding to the proteins
for line in GENE_LOCS:
    line=line.strip().split()
    GENE=line[0]
    CHROMOSOME=line[1]
    ## Avoid duplicates and empty lines
    if (GENE not in GENES) and GENE!='':
        GENES.append(GENE)
        CHROMOSOMES.append(CHROMOSOME)
        GENES_TO_REFERENCES[GENE]=line[4]
    



CHROMOSOMES=list(set(CHROMOSOMES))
CHROMOSOMES.sort()

### CHR=[f"{i}" for i in CHROMOSOMES]












##############################################################################################################################################################################################################################################################################################################################################
##############################################################################################################################################################################################################################################################################################################################################
## One Rule to Rule them All

rule all:
    input:
        SPLIT_CHRS=expand("Workspace/4_FASTA_FILES/{sample}_{CHR}.fa.gz",CHR=CHROMOSOMES,sample=SAMPLES),
        FASTA=expand("Workspace/5_GENE_FASTA_FILES/{sample}_{GENE}.fa",GENE=GENES,sample=SAMPLES),
        BLAST_RESULTS=expand("Workspace/7_BLASTED_GENES/{sample}_{GENE}_spliced.blast",GENE=GENES,sample=SAMPLES),
        FINAL_FASTA_RESULTS=expand( "Workspace/8_PROTEINS_FASTAS/{sample}_{GENE}_translated.fa",GENE=GENES,sample=SAMPLES),
        ALL_PRTOEINS_ALL_SAMPLES=expand("Workspace/9_FINAL_OUTPUT/ALL_PROT_REFERENCE.fa"),
        ALL_SAMPLES_PER_PROTEIN=expand("Workspace/9_FINAL_OUTPUT/PER_PROTEIN/{GENE}_PROT_REFERENCE.fa",GENE=GENES),
        ALL_PROTEINS_PER_SAMPLE=expand("Workspace/9_FINAL_OUTPUT/PER_SAMPLE/{sample}_PROT_REFERENCE.fa",sample=SAMPLES)






























##############################################################################################################################################################################################################################################################################################################################################
## Data Pipeline ##

## If bam file input is missing, search for a cram file alternative, convert that to a bam
#
rule Cram_to_bam:
    input:
        "Workspace/1_OG_BAM_FILES/{sample}.cram"
    output:
        temp("Workspace/1_OG_BAM_FILES/{sample}.bam")
    threads:4
    shell:"samtools view -b -@ {threads} -o {output} {input}"





## Make sure bam file has correct chromosome naming scheme
#
rule format_name:
    input:
        "Workspace/1_OG_BAM_FILES/{sample}.bam"
    output:
        temp("Workspace/2_FORMATTED_BAM/{sample}_Formatted.bam")
    threads:4
    shell: 
        """samtools view -H {input} --threads={threads} |\
        sed -e 's/SN:chr1/SN:1/' | sed -e 's/SN:chr2/SN:2/' | \
        sed -e 's/SN:chr3/SN:3/' | sed -e 's/SN:chr4/SN:4/' | \
        sed -e 's/SN:chr5/SN:5/' | sed -e 's/SN:chr6/SN:6/' | \
        sed -e 's/SN:chr7/SN:7/' | sed -e 's/SN:chr8/SN:8/' | \
        sed -e 's/SN:chr9/SN:9/' | sed -e 's/SN:chr10/SN:10/' | \
        sed -e 's/SN:chr11/SN:11/' | sed -e 's/SN:chr12/SN:12/' | \
        sed -e 's/SN:chr13/SN:13/' | sed -e 's/SN:chr14/SN:14/' | \
        sed -e 's/SN:chr15/SN:15/' | sed -e 's/SN:chr16/SN:16/' | \
        sed -e 's/SN:chr17/SN:17/' | sed -e 's/SN:chr18/SN:18/' | \
        sed -e 's/SN:chr19/SN:19/' | sed -e 's/SN:chr20/SN:20/' | \
        sed -e 's/SN:chr21/SN:21/' | sed -e 's/SN:chr22/SN:22/' | \
        sed -e 's/SN:chrX/SN:X/' |\
        sed -e 's/SN:chrM/SN:MT/' | sed -e 's/SN:chrY/SN:Y/' | sed -e 's/SN:chr\([^\s\\]\)/SN:\1/' |  sed -e 's/SN:Chr\([^\s\\]\)/SN:\1/' | samtools reheader - {input} > {output};"""



## Re-Index it
#
rule format_index_name:
    input:
        "Workspace/2_FORMATTED_BAM/{sample}_Formatted.bam"
    output:
        temp("Workspace/2_FORMATTED_BAM/{sample}_Formatted.bam.bai")
    threads: 4
    shell:
        "samtools index -b {input} -@ {threads}"














##############################################################################################################################################################################################################################################################################################################################################
##############################################################################################################################################################################################################################################################################################################################################
## FUNCTIONS

#### Which Chromosomes are pre-split avaialble and which are missing?

def GET_PRE_SPLIT_CHROMOSOMES(Sample,CHROMOSOMES):
    
    Sample=Sample.strip().split('/')[len(Sample.strip().split('/'))-1]

    Bam_List=[]
    
    for CHR in CHROMOSOMES:
        FILE='Workspace/1_OG_BAM_FILES/{}{}.bam'.format(Sample,CHR)
        if (os.path.isfile(FILE)):
            Bam_List.append(FILE)
            
    return Bam_List


##### SPLIT OR NOT SPLIT CHROMOSOMES IN BAM INPUT

def SPLIT_OR_NOT_SPLIT_BAM(Sample,CHROMOSOMES):

    Sample=Sample.strip().split('/')[len(Sample.strip().split('/'))-1]
    Sample=Sample.replace('_FRMT', "")
    
    path='Workspace/1_OG_BAM_FILES/' + str(Sample) + '.bam'
    path2='Workspace/1_OG_BAM_FILES/' + str(Sample) + '.cram'

    
    if ( (os.path.isfile(path)) or (os.path.isfile(path2)) )==True:

        Bam_List=[]

        
        for CHR in CHROMOSOMES:
            FILE='Workspace/3_SPLIT_CHR/'+ str(Sample) + '_FRMT_' + str(CHR)+'.SPLT'
            Bam_List.append(FILE)


    if ( ((os.path.isfile(path))==False) and ((os.path.isfile(path2))==False) ):
        
        Bam_List=[]
        
        for CHR in CHROMOSOMES:
            FILE='Workspace/3_SPLIT_CHR/'+ str(Sample) + '_PRE_SPLIT_' + str(CHR)+'.PRSPLT' 
            if (os.path.isfile('Workspace/1_OG_BAM_FILES/{}{}.bam'.format(Sample,CHR)))==True:  #If the sample is pre-split into chromosomes, check if the specific chromosome bam file exists
                Bam_List.append(FILE)
                

    return Bam_List


##### SPLIT OR NOT SPLIT CHROMOSOMES IN BAM INPUT

def SPLIT_OR_NOT_SPLIT_BAI(Sample,CHROMOSOMES):
    
    Sample=Sample.strip().split('/')[len(Sample.strip().split('/'))-1]
    Sample=Sample.replace('_FRMT', "")
    
    path='Workspace/1_OG_BAM_FILES/' + str(Sample) + '.bam'
    path2='Workspace/1_OG_BAM_FILES/' + str(Sample) + '.cram'

    
    if ( (os.path.isfile(path)) or (os.path.isfile(path2)) )==True:

        Bam_List=[]
        for CHR in CHROMOSOMES:
            FILE='Workspace/3_SPLIT_CHR/'+ str(Sample) + '_FRMT_' + str(CHR)+'.SPLT.bai'
            Bam_List.append(FILE)


    if ( ((os.path.isfile(path))==False) and ((os.path.isfile(path2))==False) ):
    
        Bam_List=[]
        for CHR in CHROMOSOMES:
            FILE='Workspace/3_SPLIT_CHR/'+ str(Sample) + '_PRE_SPLIT_' + str(CHR)+'.PRSPLT.bai'
            if (os.path.isfile('Workspace/1_OG_BAM_FILES/{}{}.bam'.format(Sample,CHR)))==True: #If the sample is pre-split into chromosomes, check if the specific chromosome bam file exists
                Bam_List.append(FILE)
         
    return Bam_List




##### VCF or BAM/CRAM as input (for rule)

def VCF_or_BAM(Sample,VCF_SAMPLES,CHROMOSOMES,GENES):
    
    if ((Sample in VCF_SAMPLES.keys())==True):
        REQUESTED_FASTA_TYPE= [ 'Workspace/0_VCF_FILES/{}_{}.VCFA'.format(Sample,GENE) for GENE in GENES ]

    elif((Sample not in VCF_SAMPLES.keys())==True):
        REQUESTED_FASTA_TYPE= [ 'Workspace/4_FASTA_FILES/{}_{}.fa.gz'.format(Sample,CHR) for CHR in CHROMOSOMES]


    return REQUESTED_FASTA_TYPE



##### What is the name of the VCF file and the reference genome to be used

def Get_VCF_file_and_Reference_Genome_for_Sample(Sample,VCF_SAMPLES):
    VCF_INFO=VCF_SAMPLES[Sample]
    VCF_INFO[0]=VCF_INFO[0].replace('.vcf.gz','.mod') ## Modified VCF
    VCF_INFO[1]=VCF_INFO[1].replace('.fa','.mod') ## Modified REF

    return VCF_INFO









## FUNCTIONS
##############################################################################################################################################################################################################################################################################################################################################
##############################################################################################################################################################################################################################################################################################################################################


























##############################################################################################################################################################################################################################################################################################################################################
######## Alternative Path if VCF file available along with Reference FASTA file


rule Convert_Ref:
    input:
        REF='Reference/{REF}.fa',
        
    output:
        REF_OUT='Reference/{REF}.mod',
        REF_OUT_INDEX='Reference/{REF}.mod.fai',

    threads:2
    run:
        shell("""
        cat {input.REF} |\
        sed -e 's/>chr1/>1/' | sed -e 's/>chr2/>2/' | \
        sed -e 's/>chr3/>3/' | sed -e 's/>chr4/>4/' | \
        sed -e 's/>chr5/>5/' | sed -e 's/>chr6/>6/' | \
        sed -e 's/>chr7/>7/' | sed -e 's/>chr8/>8/' | \
        sed -e 's/>chr9/>9/' | sed -e 's/>chr10/>10/' | \
        sed -e 's/>chr11/>11/' | sed -e 's/>chr12/>12/' | \
        sed -e 's/>chr13/>13/' | sed -e 's/>chr14/>14/' | \
        sed -e 's/>chr15/>15/' | sed -e 's/>chr16/>16/' | \
        sed -e 's/>chr17/>17/' | sed -e 's/>chr18/>18/' | \
        sed -e 's/>chr19/>19/' | sed -e 's/>chr20/>20/' | \
        sed -e 's/>chr21/>21/' | sed -e 's/>chr22/>22/' | \
        sed -e 's/>chrX/>X/' | sed -e 's/>chrY/>Y/' |  \
        sed -e 's/>chrM/>MT/' | sed -e 's/>chr\([^\s\\]\)/>\1/' | sed -e 's/>Chr\([^\s\\]\)/>\1/' > {output.REF_OUT}
        """)
        shell("""samtools faidx {output.REF_OUT}""")

rule Convert_VCF_and_Index:
    input:
        VCF='Workspace/0_VCF_FILES/{GVCF}.vcf.gz'
        
    output:
        VCF_OUT='Workspace/0_VCF_FILES/{GVCF}.mod',
        VCF_OUT_INDX='Workspace/0_VCF_FILES/{GVCF}.mod.csi',

    threads:4
    run:
        shell("""
        bcftools view {input.VCF} |\
        sed -e 's/chr1/1/' | sed -e 's/chr2/2/' | \
        sed -e 's/chr3/3/' | sed -e 's/chr4/4/' | \
        sed -e 's/chr5/5/' | sed -e 's/chr6/6/' | \
        sed -e 's/chr7/7/' | sed -e 's/chr8/8/' | \
        sed -e 's/chr9/9/' | sed -e 's/chr10/10/' | \
        sed -e 's/chr11/11/' | sed -e 's/chr12/12/' | \
        sed -e 's/chr13/13/' | sed -e 's/chr14/14/' | \
        sed -e 's/chr15/15/' | sed -e 's/chr16/16/' | \
        sed -e 's/chr17/17/' | sed -e 's/chr18/18/' | \
        sed -e 's/chr19/19/' | sed -e 's/chr20/20/' | \
        sed -e 's/chr21/21/' | sed -e 's/chr22/22/' | \
        sed -e 's/chrX/X/' | sed -e 's/chrY/Y/' | \
        sed -e 's/chrM/MT/' | sed -e 's/chr\([^\s\\]\)/\1/' | sed -e 's/>Chr\([^\s\\]\)/>\1/' > Workspace/0_VCF_FILES/{wildcards.GVCF}.TEMP
        """)
        shell("""bgzip -c Workspace/0_VCF_FILES/{wildcards.GVCF}.TEMP > {output.VCF_OUT}""")
        shell("""tabix -C -p vcf {output.VCF_OUT} """)
        shell("""rm Workspace/0_VCF_FILES/{wildcards.GVCF}.TEMP""")






rule Output_FASTA_FROM_VCF:
    input:
        lambda wildcards: Get_VCF_file_and_Reference_Genome_for_Sample(wildcards.sample,VCF_SAMPLES)
    output:
        temp('Workspace/0_VCF_FILES/{sample}_{GENE}.VCFA')
    threads:4
    run:
        GENE_LOC_FILE=open('Gene_locs.txt')
        LOC='1:11870-12870'  #### if Gene is not matched grab 1K bases from Chr1
        for line in GENE_LOC_FILE:
            line=line.strip().split()
            if line[0]==wildcards.GENE:
                LOC='{}:{}-{}'.format(line[1],line[2],line[3])
        shell("samtools faidx {input[1]} {LOC} | bcftools consensus {input[0]}  --missing ? -s {wildcards.sample} > {output}")
















##############################################################################################################################################################################################################################################################################################################################################
######## Split it into target chromosomes if one bam file, format each bam file if already split into chromosomes


## Split BAM into Chromosomes
#
rule format_split_into_chromosomes:
    input:
        BAM="Workspace/2_FORMATTED_BAM/{sample}_Formatted.bam",
        BAI="Workspace/2_FORMATTED_BAM/{sample}_Formatted.bam.bai",
        GENE_LOCS="Gene_locs.txt"
    output:
        expand("Workspace/3_SPLIT_CHR/{{sample}}_FRMT_{CHR}.SPLT", CHR=CHROMOSOMES),
        expand("Workspace/3_SPLIT_CHR/{{sample}}_FRMT_{CHR}.SPLT.bai", CHR=CHROMOSOMES)
    threads:4
    run:
        for CHR in CHROMOSOMES:
            shell("samtools view -b {input.BAM} {CHR} > Workspace/3_SPLIT_CHR/{wildcards.sample}_FRMT_{CHR}.SPLT --threads={threads};")
            shell("samtools index -b Workspace/3_SPLIT_CHR/{wildcards.sample}_FRMT_{CHR}.SPLT -@ {threads};")




## Pre-Split All Chromosomes Prep
#
rule format_pre_split_All_chromosomes:
    input:
        lambda wildcards: GET_PRE_SPLIT_CHROMOSOMES(wildcards.sample,CHROMOSOMES)
    output:
        BAM=expand("Workspace/3_SPLIT_CHR/{{sample}}_PRE_SPLIT_{CHR}.PRSPLT",CHR=CHROMOSOMES),
        BAI=expand("Workspace/3_SPLIT_CHR/{{sample}}_PRE_SPLIT_{CHR}.PRSPLT.bai",CHR=CHROMOSOMES)
    threads:4
    run:
        for CHR in CHROMOSOMES:
            FILE='Workspace/1_OG_BAM_FILES/{}{}.bam'.format(wildcards.sample,CHR)
            if (os.path.isfile(FILE)):
                shell("samtools index -b Workspace/1_OG_BAM_FILES/{wildcards.sample}{CHR}.bam -@ {threads};")
                shell("cp Workspace/1_OG_BAM_FILES/{wildcards.sample}{CHR}.bam Workspace/3_SPLIT_CHR/{wildcards.sample}_PRE_SPLIT_{CHR}.PRSPLT;")
                shell("cp Workspace/1_OG_BAM_FILES/{wildcards.sample}{CHR}.bam.bai Workspace/3_SPLIT_CHR/{wildcards.sample}_PRE_SPLIT_{CHR}.PRSPLT.bai;")
            else:
                shell("touch Workspace/3_SPLIT_CHR/{wildcards.sample}_PRE_SPLIT_{CHR}.PRSPLT;")
                shell("touch Workspace/3_SPLIT_CHR/{wildcards.sample}_PRE_SPLIT_{CHR}.PRSPLT.bai;")




## Request All Individual Chromosome bam files
#
rule request_chromosome_files_and_prepare_them:
    input:
        BAM=lambda wildcards: SPLIT_OR_NOT_SPLIT_BAM(wildcards.sample,CHROMOSOMES),
        BAI=lambda wildcards: SPLIT_OR_NOT_SPLIT_BAI(wildcards.sample,CHROMOSOMES),
        GENE_LOCS="Gene_locs.txt"
    output:
        temp(expand("Workspace/3_SPLIT_CHR/{{sample}}_{CHR}.bam",CHR=CHROMOSOMES)),   
        temp(expand("Workspace/3_SPLIT_CHR/{{sample}}_{CHR}.bam.bai",CHR=CHROMOSOMES))
    run:
        for CHR in CHROMOSOMES:
            
            PRE_SPLIT="Workspace/3_SPLIT_CHR/{}_PRE_SPLIT_{}.PRSPLT".format(wildcards.sample,CHR)
            SPLIT="Workspace/3_SPLIT_CHR/{}_FRMT_{}.SPLT".format(wildcards.sample,CHR)
            
            
            if ((os.path.isfile(PRE_SPLIT))==True): #If Chromosome BAM Exists Pre Split
                shell("mv Workspace/3_SPLIT_CHR/{wildcards.sample}_PRE_SPLIT_{CHR}.PRSPLT Workspace/3_SPLIT_CHR/{wildcards.sample}_{CHR}.bam")
                shell("mv Workspace/3_SPLIT_CHR/{wildcards.sample}_PRE_SPLIT_{CHR}.PRSPLT.bai Workspace/3_SPLIT_CHR/{wildcards.sample}_{CHR}.bam.bai")
                
            if ((os.path.isfile(SPLIT))==True): #If Chromosome BAM was Created from Main BAM file
                shell("mv Workspace/3_SPLIT_CHR/{wildcards.sample}_FRMT_{CHR}.SPLT Workspace/3_SPLIT_CHR/{wildcards.sample}_{CHR}.bam")
                shell("mv Workspace/3_SPLIT_CHR/{wildcards.sample}_FRMT_{CHR}.SPLT.bai Workspace/3_SPLIT_CHR/{wildcards.sample}_{CHR}.bam.bai")
                
            if ((os.path.isfile(PRE_SPLIT))==False & (os.path.isfile(SPLIT))==False): #If Chromosome BAM is just missing / not created
                shell("touch Workspace/3_SPLIT_CHR/{wildcards.sample}_{CHR}.bam")
                shell("touch Workspace/3_SPLIT_CHR/{wildcards.sample}_{CHR}.bam.bai")




## Chromosome Bam files to Fasta, different handlng of ancient and modern ones
##### TO DO
##### Get which genes are in this chromosome and output them in fasta format through ANGSD
##### Then Fix next step to simply move them from one file to the other while renaming them
rule from_bam_to_fasta_ANGSD:
    input:
        BAM="Workspace/3_SPLIT_CHR/{sample}_{CHR}.bam",
        BAI="Workspace/3_SPLIT_CHR/{sample}_{CHR}.bam.bai"
    output:
        "Workspace/4_FASTA_FILES/{sample}_{CHR}.fa.gz"
    threads: 4
    run:
        #### If user does not define any samples as ancient, using a txt file named 'Ancient_Samples.txt', treat all samples as modern!
        if (os.path.isfile('Ancient_Samples.txt')==False): 
            shell("angsd -nThreads {threads} -minQ 25 -minMapQ 25 -doFasta 2 -doCounts 1 -basesPerLine 60 -i {input.BAM} -r {wildcards.CHR} -out Workspace/4_FASTA_FILES/{wildcards.sample}_{wildcards.CHR};") ############################# <<<<<< TEST THIS FIRST, what about the output name?
        
        #### If user has defined some ancient samples, check if current sample is within list
        if (os.path.isfile('Ancient_Samples.txt')==True):
            
            #####Open Ancient Samples file since it exists, load Ancient samples
            ANCIENT_SAMPLES=[]
            ANCIENT_SAMPLE_FILE=open('Ancient_Samples.txt','r') 
            for line in ANCIENT_SAMPLE_FILE:
                ANCIENT_SAMPLES.append(line.strip())
            
            ### If current sample is ancient DNA
            if wildcards.sample in ANCIENT_SAMPLES:
                shell("angsd -nThreads {threads} -minQ 25 -minMapQ 25 -doFasta 1 -doCounts 1 -basesPerLine 60 -i {input.BAM} -r {wildcards.CHR} -out Workspace/4_FASTA_FILES/{wildcards.sample}_{wildcards.CHR};") 
            
            ### If current sample is modern  
            if wildcards.sample not in ANCIENT_SAMPLES:
                shell("angsd -nThreads {threads} -minQ 25 -minMapQ 25 -doFasta 2 -doCounts 1 -basesPerLine 60 -i {input.BAM} -r {wildcards.CHR} -out Workspace/4_FASTA_FILES/{wildcards.sample}_{wildcards.CHR};")
        
        ##### Regardless of modern or not, check the generated fasta file, if its missing, place a dummy file in its palce
        path='./Workspace/4_FASTA_FILES/{}_{}.fa.gz'.format(wildcards.sample,wildcards.CHR)
        if (os.path.exists(path)==False) or (os.path.getsize(path)<100):
            shell('cp ./Workspace/1_OG_BAM_FILES/dummy.fa ./Workspace/4_FASTA_FILES/{}_{}.fa'.format(wildcards.sample,wildcards.CHR))
            shell('gzip ./Workspace/4_FASTA_FILES/{}_{}.fa'.format(wildcards.sample,wildcards.CHR))
        





## Request all fasta files
#
rule from_All_bam_to_fasta_ANGSD:
    input:
        BAM_OUT=expand("Workspace/3_SPLIT_CHR/{sample}_{CHR}.bam",sample=SAMPLES,CHR=CHROMOSOMES),
        BAI_OUT=expand("Workspace/3_SPLIT_CHR/{sample}_{CHR}.bam.bai",sample=SAMPLES,CHR=CHROMOSOMES)
















#####################################################################################################################################################################################################################################
## Actual DNA to Proteins Translation ##
## Use custom R scripts

## Isolate Gene segment from chromosome fasta
#

rule Isolate_Gene_from_fasta:
    input:
        lambda wildcards: VCF_or_BAM(wildcards.sample,VCF_SAMPLES,CHROMOSOMES,GENES)
    output:
        expand("Workspace/5_GENE_FASTA_FILES/{{sample}}_{GENE}.fa",GENE=GENES)
    run:
        #### Check first file of input, get file extention ending
        X=input[0].split('.')
        X=X[len(X)-1]
        
        #### If input is Chromosome Fasta
        if ( (X=='gz') ):
            for CHR in CHROMOSOMES:
                shell("Rscript ./R\ scripts/Rscript1.r Workspace/4_FASTA_FILES/{wildcards.sample}_{CHR}.fa.gz Gene_locs.txt Workspace/5_GENE_FASTA_FILES/ {CHR};")

        #### If input is Fasta file from VCF, just rename it to .fa in appropriate folder
        if ( X=='VCFA' ):
            for GENE in GENES:
                shell("cp Workspace/0_VCF_FILES/{wildcards.sample}_{GENE}.VCFA  Workspace/5_GENE_FASTA_FILES/{wildcards.sample}_{GENE}.fa")






## Splice Gene segment from gene fasta, keep exones
#

rule Splice_Gene:
    input:
        "Workspace/5_GENE_FASTA_FILES/{sample}_{GENE}.fa"
    output:
        "Workspace/6_SPLICED_GENE_FILES/{sample}_{GENE}_spliced.fa"
    shell:
        "Rscript ./R\ scripts/Rscript2.r {input} starts.txt ./EIT/ Workspace/6_SPLICED_GENE_FILES/"


rule Splice_All_Genes:
    input:
        expand("Workspace/6_SPLICED_GENE_FILES/{sample}_{GENE}_spliced.fa",GENE=GENES,sample=SAMPLES)




## Run spliced segments through blastools and translate them
#

rule Translate_Through_blastools:
    input:
        SPLICED="Workspace/6_SPLICED_GENE_FILES/{sample}_{GENE}_spliced.fa",
        PROT_TEMPLATE="Genes/{GENE}.fa"
    output:
        "Workspace/7_BLASTED_GENES/{sample}_{GENE}_spliced.blast"
    shell:
        """
        makeblastdb -dbtype nucl -in {input.SPLICED};
        tblastn -query {input.PROT_TEMPLATE}  -db {input.SPLICED} -out {output} -seg no -ungapped -comp_based_stats F  -outfmt 5;
        """
        ##  -soft_masking false -gapextend 32767 -gapopen 32767 -matrix PAM70 
    
rule Translate_All_Through_Blastools:
    input:
        expand("Workspace/6_SPLICED_GENE_FILES/{sample}_{GENE}_spliced.fa",GENE=GENES,sample=SAMPLES)






## Get the output of blastools make it into a fasta file
#
rule Extract_Blastools_output:
    input:
        "Workspace/7_BLASTED_GENES/{sample}_{GENE}_spliced.blast"
    output:
        "Workspace/8_PROTEINS_FASTAS/{sample}_{GENE}_translated.fa"
    shell:
        """python3 Python\ Scripts/BLAST_EXTRACTOR.py {input} Workspace/8_PROTEINS_FASTAS/ ;"""


rule Extract_All_Blastools_output:
    input:
        expand("Workspace/7_BLASTED_GENES/{sample}_{GENE}_spliced.blast",GENE=GENES,sample=SAMPLES)


































######################################################################################################################################################################################################################################
### Final data/folder organising 



## Merge proteins from the same individual into one fasta file and all the same protein from every individual into their own fast file
#
rule Assemble_protein_dataset:
    input:
        expand("Workspace/8_PROTEINS_FASTAS/{sample}_{GENE}_translated.fa",GENE=GENES,sample=SAMPLES)
    output:
        expand("Workspace/9_FINAL_OUTPUT/ALL_PROT_REFERENCE.fa"),
        expand("Workspace/9_FINAL_OUTPUT/PER_PROTEIN/{GENE}_PROT_REFERENCE.fa",GENE=GENES),
        expand("Workspace/9_FINAL_OUTPUT/PER_SAMPLE/{sample}_PROT_REFERENCE.fa",sample=SAMPLES)
    run:
        COMMANDS1=expand("""touch Workspace/9_FINAL_OUTPUT/PER_PROTEIN/{GENE}_PROT_REFERENCE.fa; cat Workspace/8_PROTEINS_FASTAS/*_{GENE}_translated.fa >>Workspace/9_FINAL_OUTPUT/PER_PROTEIN/{GENE}_PROT_REFERENCE.fa; """,GENE=GENES)
        COMMANDS2=expand("""touch Workspace/9_FINAL_OUTPUT/PER_SAMPLE/{sample}_PROT_REFERENCE.fa; cat Workspace/8_PROTEINS_FASTAS/{sample}_*_translated.fa >>Workspace/9_FINAL_OUTPUT/PER_SAMPLE/{sample}_PROT_REFERENCE.fa; """,sample=SAMPLES)
        
        for CMD in COMMANDS1:
            shell(CMD)
        for CMD in COMMANDS2:
            shell(CMD)    
        shell(""" cat Workspace/8_PROTEINS_FASTAS/*_translated.fa >>Workspace/9_FINAL_OUTPUT/ALL_PROT_REFERENCE.fa; """)